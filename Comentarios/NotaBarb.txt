site
https://github.com/react-native-async-storage/async-storage
React Native.dev -> Get Started -> environment Setup
->Setting up the development environment
https://callstack.github.io/react-native-paper/

-->  React Native CLI Quickstart ->Windows->Android

-->Instalar Chocolaty -> Get Startes ---AGORA USA O POWSHEL (administrador)
# Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = 
[System.Net.ServicePointManager]::
SecurityProtocol -bor 3072; iex 
((New-Object System.Net.WebClient).
DownloadString('https://community.chocolatey.org/install.ps1'))

# choco install -y nodejs.install openjdk8

-->Instalat Android Studio

--> Configurar variaveis de ambientes

ANDROID_HOME -> C:\Users\barbosa\AppData\Local\Android\Sdk

path ->usuario ---C:\Users\barbosa\AppData\Local\Android\Sdk\platform-tools

1- INICIO APP
---> ABRE PRONT DE COMANDO - No diretório desejado

# npx react-native init Barb

2 - USAR EDITOR DE CODIGO _ Visual studio\sublime
--Abre o folder do app (pasta)

3 - Para RODAR

# npx react-native run-android

--E DEIXO A VIEW SOMENTE COM O CODIGO ABAIXO (Só para testar)
import React, {component} from "react";
import {View, Text, TextInput, StyleSheet, TimePickerAndroid, TouchableOpacity} from 'react-native';

export  default  function Barb(){
return(
  <View>

    <View>
      <Text>oi meu DEUS</Text>
   
    </View>

      <View>
      <Text>oi meu DEUS</Text>
    
    </View>

    </View>
);

};
--------
4--UTILIZAR BIBLIOTECA 

# npm install react-native-paper  --NÃO USEI


5---PACOTE de Icons

# npm install react-native-vector-icons  -----NÃO USEI

6---VAMOS CRIAR UMA PASTA NA RAIZ (barb) E COLOCAR TODAS AS TELAS e Componentes do NOSSO SISTEMA

7---------VAMOS FAZER em APP.js a navegação de nossa pilha (stacks) que vamos criar no diretorio barb

---Em App.js
---Precisamos instalar algunas DEPEDENCIAS
# npm install @react-navigation/native 
# npm install @react-navigation/native @react-navigation/stack --(instalei os dois juntos)
# npm install react-native-screens react-native-safe-area-context
# npm install react-native-gesture-handler  
# npm install @react-navigation/bottom-tabs  ------NÃO INSTALEI
# npm install @react-navigation/drawer
# npm install styled-components
# npm install --save styled-components   ---Não se é preciso


---E App.js Fica ASSIM:
-----ASSIM
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import Preload from "./barb/screens/preload";
//import Cadastro from './barb/screens/preload';

export default function App() {
  //VAMOS Criar nossa PILHA que vai receber o retorno do createStackNavigator(pilha de navegação)
    const Stack = createStackNavigator();

    return (
       //VAMOS Criar Container, o Navegador e as Telas de navegação
      <NavigationContainer>
          <Stack.Navigator initialRouteName="Preload">
          <Stack.Screen name="Preload" component={Preload} options={{headerShown:false}} />
           
         
          </Stack.Navigator>
      </NavigationContainer>
    );

------OU ASSIM (com as propriedade para todoas os stack (telas))

<NavigationContainer>
          <Stack.Navigator
          initialRouteName="Preload" 
          >
          <Stack.Screen name="Preload" component={Preload} options={{headerShown:false}} 
          // EXIBINDO uma tela Preload ---vai ficar um de cada vez (DEFINR A PRIMEIRA EM  <Stack.Navigator initialRouteName="Preload">)
          />


8----VAMOS FAZER NOSSO ESTILOS EM barb\assets\css\Css.js
import { StyleSheet } from "react-native";


 const css = StyleSheet.create({

    container: {
        flex: 1,
        alignItems: 'center'
    },
    container__center:{
        justifyContent:'center'
    },
    map:{
            height:'60%', 
          
            width : 400 , 
            justifyContent : 'flex-end' , 
            alignItems : 'center' , 
           //  backgroundColor:'#00f'

    },
    search:{
        height:'40%',
        
       // backgroundColor:'gray'
    },

    header:{
        backgroundColor:'#09204A',
        padding: 5,
        width: '100%',
        height: '22%',
        paddingTop: 0,
        marginTop:0
    },
    header__img:{
        marginLeft: 'auto',
        marginRight:'auto'
    },
    footer:{
        width: '100%',
        height: '78%',
        alignItems: 'center',
        justifyContent:'center',
        backgroundColor:'#eee'
    },
    input:{
        borderRadius: 2,
        height: 60,
        padding: 10,
        backgroundColor: '#fff',
        borderWidth:1,
        borderColor:'#ccc',
        width: '80%',
        marginBottom: 20,
        fontSize: 18
    },
    texto:{
        fontSize: 20,
        textAlign:'center'
    },
    textoWidth:{
        width: '80%'
    },
    button:{
        borderRadius: 5,
        backgroundColor: '#111',
        paddingTop: 15,
        paddingRight: 30,
        paddingBottom: 15,
        paddingLeft: 30,
    },
    button__text:{
        color:'#fff',
        fontWeight:'bold',
        fontSize: 17
    }


});
export  default (css);


import styled from 'styled-components/native'
export const LoadingIcon = styled.ActivityIndicator`
    margin-top: 50px;
`;

9----VAMOS FAZER NOSSAS TELAS em  barb\screens

----Tela de Preload.js
import React, {useEffect} from "react";
import { StyleSheet,  View, Text, TouchableOpacity, loadingIcon, Image} from 'react-native';
import css, {LoadingIcon} from '../assets/css/Css'

//import {  Container, LoadingIcon } from './styles'

//import Cadastro from "./Cadastro";

// RECEBE como paramentro o navigation
export default function Preload({navigation}) {

  return (
      <View style={css.container}>

          <View style={css.header}>
              <Image style={css.header__img} source={require('../assets/images/barber.png')} />
              <LoadingIcon size="large" color="#FFFFFF" />
          </View>

          
      </View>
  );
}

!0----- OK (Visualmente esta Ok , vamos fazer funcionar)

---Instalar
# npm install @react-native-community/async-storage  ---NÃO CONSEFUI INSTALAR
# npm install @react-native-async-storage/async-storage
----IMPORTAR 
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useNavigation } from "@react-navigation/native";


--NESSE MOMENTO A Preload.js esta assim, e não temos token , assm sendo pula direto pata SignIn.js
import React, {useEffect} from "react";
import { StyleSheet,  View, Text, TouchableOpacity, loadingIcon, Image} from 'react-native';
import css, {LoadingIcon} from '../assets/css/Css'
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useNavigation } from "@react-navigation/native";
//import {  Container, LoadingIcon } from './styles'
//import Cadastro from "./Cadastro";

// RECEBE como paramentro o navigation
export default ()=> {

//VAmos criar uma variavel
const navigation=useNavigation();


// TODA VEZ QUE A TELA ABRIR EXECUTE ESSE CODIGO
useEffect(()=>{
//Verificar token
  const checkToken= async ()=>{
        //Pegar um token se exixtir no aplicativo
         const token = await AsyncStorage.getItem('token');
        
      //  if(token !== null){
            // OU ASSIM
            if(token ){
           // Se não for nulo (se existir) validar token
            
        }else{
            //Se não tiver Token Manda para o login
             navigation.navigate('SignIn');
        }
  }
//Executar
  checkToken();

}, [])


  return (
      <View style={css.container}>

          <View style={css.header}>
              <Image style={css.header__img} source={require('../assets/images/barber.png')} />
              <LoadingIcon size="large" color="#FFFFFF" />
          </View>

          
      </View>
  );
}

------- E A Tela de SignIn.js (so para puxar---AINDA VAI SER FEITA)
import React from "react";
import { View, Text } from "react-native";

export  default  function App1(){
    return(
      <View >
        
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
        </View>
    );
}

11---VAMOS FAZER AGORA a Configuração do contexts na pasta barb\contexts
PARA lidar com as informações do usuario e a redurces para armazenar ESSAS 
informações

----contexts.UserContext.js
import React, {createContext, useReducer} from "react";

// IMPORTAR as Informações do UserReducer.js
import { InitialState, UserReducer  } from "../reducers/UserReducer";
// CRIAR um contexto do usauario
export const UserContext=createContext();


// CRIAR o componente especifico do contexto em uma arrayfuction usando uma profile (perfil) chamado children
// Children é tudo que tem dentro do componente
export default ({children})=>{
    // CRIAR os dois paramentro que a gente precisa usar no Reducer--Vamos utilizar-lo
    const [state, dispatch] = useReducer(UserReducer, InitialState);
    // CRIOU os dois e passar agora para o profile (perfil) atraves da propriedade value
        return (
            <UserContext.Provider value= {{state, dispatch}} >
             {children}

            </UserContext.Provider>

    );

}

----reducers.UserReducer.js
export const InitialState = {
//INFORMAÇões (conteudo) iniciais do usuario logado
avatar:'',
favorites:[],
appointmenst:[]
};

export const UserReducer = (state, action)=> {
    switch(action.type) {
        case 'setAvatar':
            //Pegar o conteudo inicial e alterar Avatar
            return {...state, avatar: action.payload.avatar};
        break;
        default:
            return state;
 
    }
}



12----CRIADO O CONTEXT VAMOS USAR-LO App.js ENVOLVENDO TODO NOSSO aplicativo
---App.js
--Primeiro importa o context
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import Preload from "./barb/screens/preload";
import SignIn from './barb/screens/SignIn';
// IMPORTAT CONTEXT que ira  ENGLOBAR O APLICATIVO (NavigationContainer)
import UserContextProfile from './barb/contexts/UserContext';

export default function App() {
  
  //VAMOS Criar nossa PILHA que vai receber o retorno do createStackNavigator(pilha de navegação)
    const Stack = createStackNavigator();


//VAMOS Criar Container, o Navegador e as Telas de navegação ENGLOBADA PELO Context
    return (
     
       <UserContextProfile>
      <NavigationContainer>
          <Stack.Navigator
          initialRouteName="Preload" 
         >
          <Stack.Screen name="Preload" component={Preload}   options={{headerShown:false}}
          // EXIBINDO uma tela Preload ---vai ficar um de cada vez (DEFINR A PRIMEIRA EM  <Stack.Navigator initialRouteName="Preload">)
          />
           <Stack.Screen name="SignIn" component={SignIn}   options={{headerShown:false}}/>
          </Stack.Navigator>
      </NavigationContainer>

   </UserContextProfile>
    );
}

---Ok PERFEITO 

13---FAZER A SEGUNDA TELA (SignIn)

---VAMOS FAZER Compomentes para usar qando desejar

----Primeiramentes vamos fazer alguns componentes na tela com css
Depois a gente Faz EXTERNOS os componentes que serão comum as outras telas
---Estilizando a tela  SignIn.js FICA ASSIM (ainda falta os componentes externos)

import React from "react";
import { View, Text, Image, TouchableOpacity } from "react-native";
import css from '../assets/css/Css'


export  default  function App1(){
    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />

         <View style={css.inputArea}>

         //OS COMPONENTES EXTERNOS FICARÃO AQUI
       
           <TouchableOpacity style={css.CustonButton}>
             <Text style={css.button__text}  >Login</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton}>
            <Text style={css.TextCuston} > Ainda sem cadastro </Text>
            <Text style={css.TextCustonBold} > Cadastre-se </Text>
           </TouchableOpacity>

        </View>
     
    );
}


-- estilizamos alguns omponentes na PASTA css
  inputArea:{
        backgroundColor:'#63C2D1',
        padding: 40,
        width: '80%',
        height: 400
    },

 CustonButton:{
        height:60,
        backgroundColor:'#268596',
        borderRadius:30,
        justifyContent:'center',
        alignItems:'center'
    },

    TextCuston:{
        fontSize:18,
        color:'#268596'

    },

    TextCustonBold:{
        fontSize:18,
        color:'#268596',
        fontWeight:'bold',
        marginLeft:5

    },

    // TouchableOpacity , texto uma ao lado do outro
    CustonMessageButton:{
        flexDirection:'row',
        justifyContent:'center',
        marginTop:50,
        marginBottom:20

    },




14 ---COMPONENTES EXTERNO (serão usando em varias telas, inclusive na SignIn.js)
VAMOS CRIAR E GUARDAR-LOS NA PASTA componentes

-----PRIMEIRO COMPONENTES (SignInput.js)  --INICIALMENTE
import React from "react";
import {View, StyleSheet, Text }   from "react-native";

const estilos = StyleSheet.create({

    ImputArea:{
        with:'100%',
        height:60,
         backgroundColor:'#268596',
         flexDirection:'row', 
         borderRadius:30,
         paddingLeft:15,
         alignItems:'center',
         marginBottom:15
       
        }
    });

   

export default ()=>{

return (
  <View style={estilos.ImputArea} > 
 <Text>ot</Text>
  </View>


);
}

-------E O CHAMARIA (usaria) (importando o componentes) e Aplicando na VIEW SignIn.js
import React from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet } from "react-native";
import css from '../assets/css/Css'
import SignInput from "../../componentes/SignInput";


export  default  function App1(){
    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />
       
         <View style={css.inputArea}>
         
             <SignInput/>
              
              <SignInput/>

           <TouchableOpacity style={css.CustonButton}>
              <Text style={css.button__text}  >Login</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton}>
            <Text style={css.TextCuston} > Ainda sem cadastro </Text>
            <Text style={css.TextCustonBold} > Cadastre-se </Text>
           </TouchableOpacity>

        </View>
    
    );
}



15--VAMOS MELHORAR - No SignInput.js
--VAMOS COLOCAR O ICON E O CAMPO no IMput de login e Senha   ---NÃO CONSEGUI COLOCAR O ICON XXXXXXXXX

import React from "react";
import {View, StyleSheet, Text, Image, TextInput}   from "react-native";

const estilos = StyleSheet.create({

    ImputArea:{
        with:'100%',
        height:60,
         backgroundColor:'#83D6E3',
         flexDirection:'row', 
         borderRadius:30,
         paddingLeft:15,
         alignItems:'center',
         marginBottom:15
       
        },

        TextImput2:{
            flex:1,
            fontSize:16,
            color:'#268596',
            marginLeft:15
        }
    });

   // <IconPng  with="24" height="24" fill="#268596" />

export default ({IconPng, placeholder} )=>{

return (
  <View style={estilos.ImputArea} > 

    <TextInput style={estilos.TextImput2} placeholder={placeholder} ></TextInput>
  </View>


);
}

-----E A SignUp.js
import React from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet } from "react-native";
import css from '../assets/css/Css'
import SignInput from "../../componentes/SignInput";

import Envelope from "../assets/images/Envelope.png";
import Cadeado from  "../assets/images/Cadeado.png";


export  default  function App1(){
    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />
       
         <View style={css.inputArea}>
         
             <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              />

           <TouchableOpacity style={css.CustonButton}>
              <Text style={css.button__text}  >Login</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton}>
            <Text style={css.TextCuston} > Ainda sem cadastro </Text>
            <Text style={css.TextCustonBold} > Cadastre-se </Text>
           </TouchableOpacity>

        </View>
    
    );
}

16 ------TENTAR FAZER FUNCIONAR O LOGIN
---VAMOS criar state do email e da senha NA VIEW  SignIn.js 
 const [emailField, setEmailField] = useState('');
 const [passwordField, setPasswordField] = useState('');
----Usaremos o UseState lá em cima
-e repasaremos nos nos SignInput com o value
  <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             value={emailField}
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              />
---e vamos repassar tambem para a VIEW SignInput.js no imput com o value igual ao value
     export default ({IconPng, placeholder, value} )=>{

return (
  <View style={estilos.ImputArea} > 

    <TextInput style={estilos.TextImput2} placeholder={placeholder} ></TextInput>
    Value={value}
  </View>

);
}

----NESSE MOMENTO SE QUISSER FAZER UM TESTE É SO COLOCAR UM STRING NO Started
export  default  function App1(){

      const [emailField, setEmailField] = useState('carlos@gloa');
      const [passwordField, setPasswordField] = useState('');
----------
---AGORA PRECISAMOS A PESSOA MUDAR O texto
---NA view SignIn.js VAMOS POR A PROPRIEDADE onChangeText PARA Mudar o text 
 <View style={css.inputArea}>
         
             <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             value={emailField}
             onChangeText={t=>setEmailField(t)}
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              onChangeText={t=>setPasswordField(t)}
              />
---E Repassar para a VIEW SignInput.js no imput com o onChangeText={onChangeText} (REPLICAR)
export default ({IconPng, placeholder, value, onChangeText} )=>{

return (
  <View style={estilos.ImputArea} > 

    <TextInput style={estilos.TextImput2}
     placeholder={placeholder} 
     value={value}
     onChangeText={onChangeText}
    
    />
   
  </View>

);
}

-----APARTIR DE AGORA POSSO CONTROLAR --DIGITAR O desejado
---NA SENHA PRECISAMOS OMITIR O conteudo
---NA View SignIn.js VAMOS dizer que a password é verdadeira
<SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              onChangeText={t=>setPasswordField(t)}
              password={true}
              />
 --E AO REPLICARMOS NA VIEW SignInput.js FLAR QUE ELA È SEGURA PELA PROPRIEDADE secureTextEntry={password}
export default ({IconPng, placeholder, value, onChangeText, password} )=>{

return (
  <View style={estilos.ImputArea} > 

    <TextInput style={estilos.TextImput2}
     placeholder={placeholder} 
     value={value}
     onChangeText={onChangeText}
    secureTextEntry={password}
    />
   
  </View>

);
}

----------OK PERFEITO

17--VAMOS CRIAR A TELA DE REGISTRO\CADASTRO (SignUp.js) que é identica a essa so que um campo a mais
---COPIA A SignIm.js e cola na SignUp.js


import React, {useState, useEffect} from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet } from "react-native";
import css from '../assets/css/Css'
import SignInput from "../../componentes/SignInput";
import { useNavigation } from "@react-navigation/native";

import Envelope from "../assets/images/Envelope.png";
import Cadeado from  "../assets/images/Cadeado.png";


export  default  function App2(){

 

   //Função de NAVEGAÇÃO
   const navigation=useNavigation();


   //Função de state
      const [nomeField, setNameField] = useState('');
      const [emailField, setEmailField] = useState('');
      const [passwordField, setPasswordField] = useState('');

      
   //Função de redirecionamento

        const handleSignClick= ()=> { 

        }

   
         const handleMessageButtonClick = ()=> { 
             // NAVEGAR POR ROUTER
            //navigation.navigate('SignUp');
          // handleMessageButtonClick();
             navigation.navigate({ 
               routes:[{name: 'SignIn'}]
            });
           /*
            onPress= ()=>{SignUp}  
                
           onPress={()=>{navigation.navigate("Home")}}  */
         }

    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />
       
         <View style={css.inputArea}>

            <SignInput IconPng={Envelope}
             placeholder="Digite seu Nome"
             value={nomeField}
             onChangeText={t=>setNameField(t)}
             /> 

             <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             value={emailField}
             onChangeText={t=>setEmailField(t)}
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              onChangeText={t=>setPasswordField(t)}
              password={true}
              />

           <TouchableOpacity style={css.CustonButton} onPress={handleSignClick} >
              <Text style={css.button__text}  >CADASTRAR</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton} onPress={handleMessageButtonClick} >
            <Text style={css.TextCuston} >Já tem cadastro </Text>
            <Text style={css.TextCustonBold} > Faça Login </Text>
           </TouchableOpacity>

        </View>
    
    );
}



18---VAMOS PARA AÇÃO do BOTÃO CADASTRA-SE (ir para tela de registro) e LOGIn na |TELA SignIn.js
--PARA NAVEGAR PRECISAMOS DO NAVIGATION --VAMOS IMPORTAR-LO
import { useNavigation } from "@react-navigation/native";
---E CRIAR UMA VARIAVEL DE navegação

---E CRIAR UM FUNÇÂO DE NAVEGAÇÂO 
 //Função de NAVEGAÇÃO
   const navigation = useNavigation();

---VAmos Criar uma função para direcionar na tela SignIn.js (LOGIN) atraves do evento onpress do TouchableOpacity
 //Função de redirecionamento

        const handleSignClick= ()=> { 

        }
 
         const handleMessageButtonClick= ()=> { 
              
             navigation.reset({ 
               index:0,
               routes:[{name: 'SignUp'}]
                
            });
         }

-----Evento onpress
<TouchableOpacity style={css.CustonButton} onPress={handleSignClick} >
              <Text style={css.button__text}  >Login</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton} onPress={handleMessageButtonClick} >



-------OBSERVAÇÂO --(tinha esquecido de empilha a TELA SignUp.js la em App.js no nos Stack)

---EMPINHANDO apos importar a App.js FICA ASSIM:
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import Preload from "./barb/screens/preload";
import SignIn from './barb/screens/SignIn';
import SignUp from './barb/screens/SignUp';
// IMPORTAT CONTEXT que ira  ENGLOBAR O APLICATIVO (NavigationContainer)
import UserContextProfile from './barb/contexts/UserContext';

export default function App() {
  
  //VAMOS Criar nossa PILHA que vai receber o retorno do createStackNavigator(pilha de navegação)
    const Stack = createStackNavigator();


//VAMOS Criar Container, o Navegador e as Telas de navegação ENGLOBADA PELO Context
    return (
     
       <UserContextProfile>
      <NavigationContainer>
          <Stack.Navigator
          initialRouteName="Preload" 
         >
          <Stack.Screen name="Preload" component={Preload}   options={{headerShown:false}}
          // EXIBINDO uma tela Preload ---vai ficar um de cada vez (DEFINR A PRIMEIRA EM  <Stack.Navigator initialRouteName="Preload">)
          />
           <Stack.Screen name="SignIn" component={SignIn}   options={{headerShown:false}}/>
           <Stack.Screen name="SignUp" component={SignUp}   options={{headerShown:false}}/>
          </Stack.Navigator>
      </NavigationContainer>

   </UserContextProfile>
    );
}

----A PAGINA SignIn.js FICARÁ ASSIM ---com o redirecionamento 
---MUDEI O nome da fuction para (Login)

import React, {useState, useEffect} from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet } from "react-native";
import css from '../assets/css/Css'
import SignInput from "../../componentes/SignInput";
import { useNavigation } from "@react-navigation/native";

import Envelope from "../assets/images/Envelope.png";
import Cadeado from  "../assets/images/Cadeado.png";


export  default  function Login(){


   //Função de NAVEGAÇÃO
   const navigation = useNavigation();


   //Função de state
      const [emailField, setEmailField] = useState('');
      const [passwordField, setPasswordField] = useState('');

      
   //Função de redirecionamento

        const handleSignClick= ()=> { 

        }

   
         const handleMessageButtonClick = ()=> { 
              // // NAVEGAR POR ROUTER (reset - não deixa voltar)
              navigation.reset({ 
                index:0,
               routes:[{name: 'SignUp'}]
                
            });
           /**/ 
         /*
             onPress= ('SignUp')
                onPress={()=>{navigation.navigate("SignUp")}}  
                  navigation.navigate('SignUp');
         */

         }
 
    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />
       
         <View style={css.inputArea}>
         
             <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             value={emailField}
             onChangeText={t=>setEmailField(t)}
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              onChangeText={t=>setPasswordField(t)}
              password={true}
              />

           <TouchableOpacity style={css.CustonButton} onPress={handleSignClick} >
              <Text style={css.button__text}  >Login</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton}    onPress={handleMessageButtonClick}    >
            <Text style={css.TextCuston} > Ainda sem cadastro </Text>
            <Text style={css.TextCustonBold} > Cadastre-se </Text>
           </TouchableOpacity>

        </View>
    
    );
}


--------Ok PERFEITO (assim redirecionou para cadastro)   poderia ter feito
pelo onPress={()=>{navigation.navigate("SignUp")} no TouchableOpacity

19-----VAMOS COMEÇAR A FAZER REQUISIÇÕES
------- CRIAR UM DIRETORIO em barb\Api.js e CRIAR UMA API

const BASE_API = 'https://api.b7web.com.br/devbarber/api';
//OBJETO QUE VAI TER AS AÇÕES QUE VAMOS PRECISAR FAZER

// TOKEN

export default{
 ckeckToken: async (token)=> {

    const req = await fetch(`${BASE_API}/auth/refresh`, {
        method:'POST',
            headers: {
                    accept: 'application/json',
                    'Content-Type': 'application/json',
               },
       //CONTEUDO que estou enviando
       body: JSON.stringify ( {token} )

    });
    const json = await req.json();
    return json;


    },

    // LOGIN

     // RECEBER um email e uma Senha aqui
    signIn: async (email, password)=> {
        console.log("URL", `${BASE_API}/auth/login` );
        console.log("email", email );
        console.log("password" , password);
        const req = await fetch(`${BASE_API}/auth/login`, {
                method:'POST',
                headers: {
                    accept: 'application/json',
                    'Content-Type': 'application/json',
               },
               //CONTEUDO que estou enviando
               body: JSON.stringify ( {email, password} )

            });
            const json = await req.json();
            return json;
    },
 // CADASTRO
    signUp: async (name, email, password)=> {
        console.log("name", name );
        console.log("email", email );
        console.log("password" , password);
        const req = await fetch(`${BASE_API}/auth/user`, {
            method:'POST',
               headers: {
                    accept: 'application/json',
                    'Content-Type': 'application/json',
               },
           //CONTEUDO que estou enviando
           body: JSON.stringify ( {name, email, password} )

        });
        const json = await req.json();
        return json;
    },
};

---TEsTAR NO SITE e cria ussuario de teste (https://resttesttest.com/) NO metodo POST
nane Paulo
 email paulo@gmail.com
  password 1234


 ------PARA USAR AS REQUISIÇÕES IMPORTAMOS E COLOCAMOS NA TELAS

20 ---TELA DE LOGIN (SignIn.js)
import Api from '../../Api';
------


import React, {useState, useEffect} from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet } from "react-native";
import css from '../assets/css/Css'
import SignInput from "../../componentes/SignInput";
import { useNavigation } from "@react-navigation/native";
import Api from '../Api';


import Envelope from "../assets/images/Envelope.png";
import Cadeado from  "../assets/images/Cadeado.png";


export  default  function Login(){


   //Função de NAVEGAÇÃO
   const navigation = useNavigation();


   //Função de state
      const [emailField, setEmailField] = useState('');
      const [passwordField, setPasswordField] = useState('');

      
   //Função de redirecionamento

        const handleSignClick = async ()=> { 
            // Se apertou botao de login verifivar se colocou email e senha
            if(emailField !== '' && passwordField !== '' ) {
               // RECEBER A RESPOSTA (podia ser let res)
               let json = await Api.signIn(emailField, passwordField );
               console.log(json);
               // Verifica A RESPOSTA
               if (json.token){
                  alert('DEU CERTO');

               }else{
                  alert('Email e ou senha errado');
               }

            }else{
               alert ('Preencha os campos');

            }
        }

   
         const handleMessageButtonClick = ()=> { 
              // // NAVEGAR POR ROUTER (reset - não deixa voltar)
              navigation.reset({ 
                index:0,
               routes:[{name: 'SignUp'}]
                
            });
         }
 
    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />
       
         <View style={css.inputArea}>
         
             <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             value={emailField}
             onChangeText={t=>setEmailField(t)}
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              onChangeText={t=>setPasswordField(t)}
              password={true}
              />

           <TouchableOpacity style={css.CustonButton} onPress={handleSignClick} >
              <Text style={css.button__text}  >Login</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton}    onPress={handleMessageButtonClick}    >
            <Text style={css.TextCuston} > Ainda sem cadastro </Text>
            <Text style={css.TextCustonBold} > Cadastre-se </Text>
           </TouchableOpacity>

        </View>
    
    );
}

21----- ---TELA DE CADASTRO (SignUp.js)
import Api from '../../Api';
------

import React, {useState, useEffect} from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet } from "react-native";
import css from '../assets/css/Css'
import SignInput from "../../componentes/SignInput";
import { useNavigation } from "@react-navigation/native";
import Api from '../Api';

import Envelope from "../assets/images/Envelope.png";
import Cadeado from  "../assets/images/Cadeado.png";


export  default  function App2(){

 

   //Função de NAVEGAÇÃO
   const navigation=useNavigation();


   //Função de state
      const [nameField, setNameField] = useState('');
      const [emailField, setEmailField] = useState('');
      const [passwordField, setPasswordField] = useState('');

      
   //Função de redirecionamento

        const handleSignClick =  async()=> { 
         if(nameField !== '' && emailField !== '' && passwordField !== '' ) {
            // RECEBER A RESPOSTA (podia ser let res)
            let res = await Api.signUp(nameField, emailField, passwordField );
            console.log(res);
            // Verifica A RESPOSTA
            if (res.token){
               alert('DEU CERTO');

            }else{
               alert("Erro :"+res.error);
            }

         }else{
            alert ('Preencha os campos');

         }
        }

   
         const handleMessageButtonClick = ()=> { 
             // NAVEGAR POR ROUTER
            //navigation.navigate('SignUp');
          // handleMessageButtonClick();
             navigation.navigate({ 
               routes:[{name: 'SignIn'}]
            });
           /*
            onPress= ()=>{SignUp}  
                
           onPress={()=>{navigation.navigate("Home")}}  */
         }

    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />
       
         <View style={css.inputArea}>

            <SignInput IconPng={Envelope}
             placeholder="Digite seu Nome"
             value={nameField}
             onChangeText={t=>setNameField(t)}
             /> 

             <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             value={emailField}
             onChangeText={t=>setEmailField(t)}
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              onChangeText={t=>setPasswordField(t)}
              password={true}
              />

           <TouchableOpacity style={css.CustonButton} onPress={handleSignClick} >
              <Text style={css.button__text}  >CADASTRAR</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton} onPress={handleMessageButtonClick} >
            <Text style={css.TextCuston} >Já tem cadastro </Text>
            <Text style={css.TextCustonBold} > Faça Login </Text>
           </TouchableOpacity>

        </View>
    
    );
}


---OK PERFEITO (funcionou apenas com messagem , vamos entrar na telas de verdade)



22----SALVAR O TOKEN tanto no SignIn e SignUp e MANDAR o usuario para navegagar ou voltar
PRECISAMOS IMPORTAR NO AsyncStorage, 
--Importar o AsyncStorage e o UserContext
import AsyncStorage from "@react-native-async-storage/async-storage";
import UserContext from '../contexts/UserContext'
----- CRIAR O DISPATCH (envio) para mandar informações para o Context
//CRIAR DISPAPTCH (vou chamar de UserDispatch) PARA ENVIAR INFORMAÇÂO PARA O CONTEXT
   //  const {dispatch: UserDispatch} = useContext(UserContext) ;
      ------TIVE QUE MUDAR PARA dispatch POIS ESTAVA DANDO ERRO
   //Função de NAVEGAÇÃO
   const navigation = useNavigation();

---LA NO DEU "CERTO" 
if (json.token){
                 // alert('DEU CERTO');
                     await AsyncStorage.setItem('token', json.token);
                 // SALVAR TOKEN , pega ele e manda como json.token para AsyncStorage
                     await AsyncStorage.setItem('token', json.token);
                   //ALEM DO TOKEM TEMOS OUTRAS INFORMAÇÂO no (data), VAMOS MANDAR TAMBEM , ex:avatar para colocar no context
                   //MANDAR INFORMAÇÔES PARA O CONTEXT ATRAVES DO dispatch
                      //  UserDispatch ({   ------TIVE QUE MUDAR PARA dispatch POIS ESTAVA DANDO ERRO
                      dispatch ({
                      type: 'setAvatar', 
                      payload:{
                         avatar: jsom.data.avatar
                      }
                   });

                    //JA DE POSSE E SALVO AS INFORMAÇÔES MANDAR O USUARIO PARA AS TELAS
                    navigation.reset({
                     routes:[{name: 'MainTab'}]
                    });

               }else{
                  alert('Email e ou senha errado');
               }

            }else{
               alert ('Preencha os campos');

            }
        }


--------- A TELA signIn FICA ASSIM:

import React, {useState, useContext} from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet } from "react-native";
import css from '../assets/css/Css'
import SignInput from "../../componentes/SignInput";
import { useNavigation } from "@react-navigation/native";
import Api from '../Api';
import AsyncStorage from "@react-native-async-storage/async-storage";
import UserContext from '../contexts/UserContext'


import Envelope from "../assets/images/Envelope.png";
import Cadeado from  "../assets/images/Cadeado.png";


export  default  function Login(){

   //CRIAR DISPAPTCH (vou chamar de UserDispatch) PARA ENVIAR INFORMAÇÂO PARA O CONTEXT
    //  const {dispatch: UserDispatch} = useContext(UserContext) ;
      ------TIVE QUE MUDAR PARA dispatch POIS ESTAVA DANDO ERRO
      const dispatch = useContext(UserContext);
   //Função de NAVEGAÇÃO
   const navigation = useNavigation();


   //Função de state
      const [emailField, setEmailField] = useState('');
      const [passwordField, setPasswordField] = useState('');

      
   //Função de redirecionamento

        const handleSignClick = async ()=> { 
            // Se apertou botao de login verifivar se colocou email e senha
            if(emailField !== '' && passwordField !== '' ) {
               // RECEBER A RESPOSTA (podia ser let res)
               let json = await Api.signIn(emailField, passwordField );
               console.log(json);
               // Verifica A RESPOSTA
               if (json.token){
                 // alert('DEU CERTO');
                     
                 // SALVAR TOKEN , pega ele e manda como json.token para AsyncStorage
                     await AsyncStorage.setItem('token', json.token);
                   //ALEM DO TOKEM TEMOS OUTRAS INFORMAÇÂO no (data), VAMOS MANDAR TAMBEM , ex:avatar para colocar no context
                   //MANDAR INFORMAÇÔES PARA O CONTEXT ATRAVES DO dispatch
                   //  UserDispatch ({   ------TIVE QUE MUDAR PARA dispatch POIS ESTAVA DANDO ERRO
                      dispatch ({
                      type: 'setAvatar', 
                      payload:{
                         avatar: json.data.avatar
                      }
                   });

                    //JA DE POSSE E SALVO AS INFORMAÇÔES MANDAR O USUARIO PARA AS TELAS
                    navigation.reset({
                     routes:[{name: 'MainTab'}]
                    });

               }else{
                  alert('Email e ou senha errado');
               }

            }else{
               alert ('Preencha os campos');

            }
        }

   
         const handleMessageButtonClick = ()=> { 
              // // NAVEGAR POR ROUTER (reset - não deixa voltar)
              navigation.reset({ 
                index:0,
               routes:[{name: 'SignUp'}]
                
            });
         }
 
    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />
       
         <View style={css.inputArea}>
         
             <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             value={emailField}
             onChangeText={t=>setEmailField(t)}
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              onChangeText={t=>setPasswordField(t)}
              password={true}
              />

           <TouchableOpacity style={css.CustonButton} onPress={handleSignClick} >
              <Text style={css.button__text}  >Login</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton}    onPress={handleMessageButtonClick}    >
            <Text style={css.TextCuston} > Ainda sem cadastro </Text>
            <Text style={css.TextCustonBold} > Cadastre-se </Text>
           </TouchableOpacity>

        </View>
    
    );
}

23- A TELA DO SignUp.js FAZ A MESMA COISA

-----PRECISAMOS IMPORTAR NO AsyncStorage, e o UserContext

---- CRIAR O DISPATCH (envio) para mandar informações para o Context

-----E FAREMOS A MESMA COISA DO SignIn MUDANDOA APENAS UMA INFORMAçÂO (troca json por res)

                 
                 // SALVAR TOKEN , pega ele e manda como res.token para AsyncStorage
                     await AsyncStorage.setItem('token', res.token);
                   //ALEM DO TOKEM TEMOS OUTRAS INFORMAÇÂO no (data), VAMOS MANDAR TAMBEM , ex:avatar para colocar no context
                   //MANDAR INFORMAÇÔES PARA O CONTEXT ATRAVES DO dispatch
                   //  UserDispatch ({   ------TIVE QUE MUDAR PARA dispatch POIS ESTAVA DANDO ERRO
                      dispatch ({
                      type: 'setAvatar', 
                      payload:{
                         avatar: res.data.avatar
                      }
                   });

                    //JA DE POSSE E SALVO AS INFORMAÇÔES MANDAR O USUARIO PARA AS TELAS
                    navigation.reset({
                     routes:[{name: 'MainTab'}]
                    });

---A TELA DO SignUp.js FICA ASSIM:

import React, {useState, useEffect, useContext} from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet } from "react-native";
import css from '../assets/css/Css'
import SignInput from "../../componentes/SignInput";
import { useNavigation } from "@react-navigation/native";
import Api from '../Api';
import AsyncStorage from "@react-native-async-storage/async-storage";
import UserContext from '../contexts/UserContext'

import Envelope from "../assets/images/Envelope.png";
import Cadeado from  "../assets/images/Cadeado.png";


export  default  function App2(){

 
    //CRIAR DISPAPTCH (vou chamar de UserDispatch) PARA ENVIAR INFORMAÇÂO PARA O CONTEXT
     //  const {dispatch: UserDispatch} = useContext(UserContext) ;
      ------TIVE QUE MUDAR PARA dispatch POIS ESTAVA DANDO ERRO
      const dispatch = useContext(UserContext);
   //Função de NAVEGAÇÃO
   const navigation=useNavigation();


   //Função de state
      const [nameField, setNameField] = useState('');
      const [emailField, setEmailField] = useState('');
      const [passwordField, setPasswordField] = useState('');

      
   //Função de redirecionamento

        const handleSignClick =  async()=> { 
         if(nameField !== '' && emailField !== '' && passwordField !== '' ) {
            // RECEBER A RESPOSTA (podia ser let res)
            let res = await Api.signUp(nameField, emailField, passwordField );
            console.log(res);
            // Verifica A RESPOSTA
            if (res.token){
               //alert('DEU CERTO');
             
               // SALVAR TOKEN , pega ele e manda como json.token para AsyncStorage
                   await AsyncStorage.setItem('token', res.token);
                 //ALEM DO TOKEM TEMOS OUTRAS INFORMAÇÂO no (data), VAMOS MANDAR TAMBEM , ex:avatar para colocar no context
                 //MANDAR INFORMAÇÔES PARA O CONTEXT ATRAVES DO dispatch
                //  UserDispatch ({   ------TIVE QUE MUDAR PARA dispatch POIS ESTAVA DANDO ERRO
                      dispatch ({
                    type: 'setAvatar', 
                    payload:{
                       avatar: res.data.avatar
                    }
                 });

                  //JA DE POSSE E SALVO AS INFORMAÇÔES MANDAR O USUARIO PARA AS TELAS
                  navigation.reset({
                   routes:[{name: 'MainTab'}]
                  });

            }else{
               alert("Erro :"+res.error);
            }

         }else{
            alert ('Preencha os campos');

         }
        }

   
         const handleMessageButtonClick = ()=> { 
             // NAVEGAR POR ROUTER
            //navigation.navigate('SignUp');
          // handleMessageButtonClick();
             navigation.navigate({ 
               routes:[{name: 'SignIn'}]
            });
           /*
            onPress= ()=>{SignUp}  
                
           onPress={()=>{navigation.navigate("Home")}}  */
         }

    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />
       
         <View style={css.inputArea}>

            <SignInput IconPng={Envelope}
             placeholder="Digite seu Nome"
             value={nameField}
             onChangeText={t=>setNameField(t)}
             /> 

             <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             value={emailField}
             onChangeText={t=>setEmailField(t)}
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              onChangeText={t=>setPasswordField(t)}
              password={true}
              />

           <TouchableOpacity style={css.CustonButton} onPress={handleSignClick} >
              <Text style={css.button__text}  >CADASTRAR</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton} onPress={handleMessageButtonClick} >
            <Text style={css.TextCuston} >Já tem cadastro </Text>
            <Text style={css.TextCustonBold} > Faça Login </Text>
           </TouchableOpacity>

        </View>
    
    );
}


24 ---SE RODAR E FAZER LOGIN COM O NOSSO USUURIO TESTE CRIADO LA NO REST tetstest DA 
API_BASE (https://api.b7web.com.br/devbarber/api------- paulo@gmail.com ---1234) 
E DEPOIS TENTAR ELE DEVE APRESENTAR UMA ERRO, FICANDO RODANDO NA TELA DE PRELOAD ,(OK FOI O QUE ACONTECEU )
TEREMOS QUE VALIDAR O TOKEM NO PRELOAD COMO TAMBEM  CRIAMOS A TELA (Mainytab).


----

25---VALIDAR TOKEN NO preload.js

---IMPORTAR api.js
import Api from '../Api';
import UserContext from '../contexts/UserContext'

-- //CRIAR DISPAPTCH (vou chamar de UserDispatch) PARA ENVIAR INFORMAÇÂO PARA O CONTEXT
     //  const {dispatch: UserDispatch} = useContext(UserContext) ;
      ------TIVE QUE MUDAR PARA dispatch POIS ESTAVA DANDO ERRO
      const dispatch = useContext(UserContext);

-----------E FAREMOS A MESMA COISA DO SignIn MUDANDOA APENAS UMA INFORMAçÂO (troca json por res)

                 
                 // SALVAR TOKEN , pega ele e manda como res.token para AsyncStorage
                     await AsyncStorage.setItem('token', res.token);
                   //ALEM DO TOKEM TEMOS OUTRAS INFORMAÇÂO no (data), VAMOS MANDAR TAMBEM , ex:avatar para colocar no context
                   //MANDAR INFORMAÇÔES PARA O CONTEXT ATRAVES DO dispatch
                   //  UserDispatch ({   ------TIVE QUE MUDAR PARA dispatch POIS ESTAVA DANDO ERRO
                      dispatch ({
                      type: 'setAvatar', 
                      payload:{
                         avatar: res.data.avatar
                      }
                   });

                    //JA DE POSSE E SALVO AS INFORMAÇÔES MANDAR O USUARIO PARA AS TELAS
                    navigation.reset({
                     routes:[{name: 'MainTab'}]
                    });

-------TELA DE Preload.js FICA ASSIM:
import React, {useEffect, useContext} from "react";
import { StyleSheet,  View, Text, TouchableOpacity, loadingIcon, Image} from 'react-native';
import css, {LoadingIcon} from '../assets/css/Css'
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useNavigation } from "@react-navigation/native";
import Api from '../Api';
import UserContext from '../contexts/UserContext'
//import {  Container, LoadingIcon } from './styles'
//import Cadastro from "./Cadastro";
//import MainStack from "../stacks/MainStack";
import MainTab from "../stacks/MainTab";



// RECEBE como paramentro o navigation
export default ()=> {

  //CRIAR DISPAPTCH (vou chamar de UserDispatch) PARA ENVIAR INFORMAÇÂO PARA O CONTEXT
  const dispatch = useContext(UserContext);

//VAmos criar uma variavel
const navigation=useNavigation();


// TODA VEZ QUE A TELA ABRIR EXECUTE ESSE CODIGO
useEffect(()=>{
//Verificar token
  const checkToken= async ()=>{
        //Pegar um token se exixtir no aplicativo
         const token = await AsyncStorage.getItem('token');
        
      //  if(token !== null){
            // OU ASSIM
            if(token ){
           // Se não for nulo (se existir) VALIDAR token
            // MANDA TOKEM
           let res = await Api.ckeckToken (token);
           // SE FUNCIONAR ELE VAI ME MANDAR O CONFIRMAR O TOKEN 
           // VAMOS VERIFICAR ESSE TOKEN
           if (res.token){
             // SE DEU CERTO 
              // SALVAR OU VALIDAR TOKEN , pega ele e manda como json.token para AsyncStorage
              await AsyncStorage.setItem('token', res.token);
              //ALEM DO TOKEM TEMOS OUTRAS INFORMAÇÂO no (data), VAMOS MANDAR TAMBEM , ex:avatar para colocar no context
              //MANDAR INFORMAÇÔES PARA O CONTEXT ATRAVES DO dispatch
              /*
              dispatch({
                        type: 'setAvatar',
                        payload:{
                            avatar: res.data.avatar
                        }
                    });*/

               //JA DE POSSE E SALVO AS INFORMAÇÔES MANDAR O USUARIO PARA AS TELAS
               navigation.reset({
                routes:[{name:'MainTab'}]
            });


           }else{
              navigation.navigate('SignIn');
              } 


        }else{
            //Se não tiver Token Manda para o login
             navigation.navigate('SignIn');
        }
  }
//Executar
  checkToken();

}, [])


  return (
      <View style={css.container}>

          <View style={css.header}>
              <Image style={css.header__img} source={require('../assets/images/barber.png')} />
              <LoadingIcon size="large" color="#FFFFFF" />
              
          </View>

          
      </View>
  );
}

26-----FAZER OUTRA TELAS
---INSTALAR bottom-tabs 
# npm install @react-navigation/bottom-tabs  
 --IMPORTAR createBottomTabNavigator

----A TELA (stack) MainTab.js FICA ASSIM:

import React from "react";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";


const Tab = createBottomTabNavigator();

export default () => (

    <Tab.Navigator>
         <Tab.Screen   name="Home"   component={Home}  /* tem que criar esse componente  */ />
         <Tab.Screen   name="Search"   component={Search}/>
         <Tab.Screen   name="Appointments"   component={Appointments}/>
         <Tab.Screen   name="Favorites"   component={Favorites}/>
         <Tab.Screen   name="Profile"   component={Profile}/>



    </Tab.Navigator>
)


27---CRIAR A TELA Home e as outras na pasta screns (tudo junto)
import React from 'react'
import { Text, View } from 'react-native'
import css from '../assets/css/Css'

export default () => {

    return (

    <View style = {css.container}>
        <Text>
            Home        
        </Text>

    </View>

    );

}

---TODAS OUTRA SERÃO IDENTICAR MUDANDO SOMENTE O texto
-----DEPOIS DE CRIADA, VAMOS IMPORTAR_LAS PARA MainTab
import React from "react";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";

import Home from '../screens/Home';
import Search from '../screens/Search';
import Appointments from '../screens/Appointments';
import Favorites from '../screens/Favorites';
import Profile from '../screens/Profile';



const Tab = createBottomTabNavigator();

export default () => (

    <Tab.Navigator>
         <Tab.Screen   name="Home"   component={Home}  /* tem que criar esse componente  */ />
         <Tab.Screen   name="Search"   component={Search}/>
         <Tab.Screen   name="Appointments"   component={Appointments}/>
         <Tab.Screen   name="Favorites"   component={Favorites}/>
         <Tab.Screen   name="Profile"   component={Profile}/>



    </Tab.Navigator>
)

28---VAMOS FAZER UM LINK DESSE MainTab com o MainStack

---NA TELA MainStack  IMPORTAR o MainTab e cria uma rota para ele
---A TELA MainStack.js FICA ASSIM:
import React from "react";
import { createStackNavigator } from "@react-navigation/stack";
//import { StackActions } from "@react-navigation/routers";

//VAMOS Criar nossa PILHA que vai receber o retorno do createStackNavigator(pilha de navegação)
const Stack=createStackNavigator();

// IMPORTAR AS TELAS PARA SEREM USADAS NA PILHA
import Preload from '../screens/Preload';
import SignIn from '../screens/SignIn';
import SignUp from '../screens/SignIn';

import MainTab from "./MainTab";

export default ()=>{

  return (
    //VAMOS Criar uma pilha de telas (As que usaremos nessa pilha)
  <Stack.Navigator>
               <Stack.Screen  // EXIBINDO uma tela Preload ---vai ficar um de cada vez (DEFINR A PRIMEIRA EM  <Stack.Navigator initialRouteName="Preload">)
                name="Preload"
                component={Preload}  // tem que criar esse componente
                options={{title:'Tela inicial'}}
                />

                <Stack.Screen   name="SignIn"   component={SignIn}  /* tem que criar esse componente  */   options={{title:'Tela signInl'}} />
                <Stack.Screen   name="SignUp"   component={SignUp}  /* tem que criar esse componente  */   options={{title:'Tela signUpl'}} />   
                <Stack.Screen   name="MainTab"   component={MainTab}   />   

  </Stack.Navigator>
  );
}

29-----E NA TELA App.js FAZ o IMPORT DA MainTab e COLOCAMOS NA PILHA
---App;js FICA ASSIM :

import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import Preload from "./barb/screens/preload";
import SignIn from './barb/screens/SignIn';
import SignUp from './barb/screens/SignUp';
// IMPORTAT CONTEXT que ira  ENGLOBAR O APLICATIVO (NavigationContainer)
import UserContextProfile from './barb/contexts/UserContext';
import MainTab from './barb/stacks/MainTab';


export default function App() {
  
  //VAMOS Criar nossa PILHA que vai receber o retorno do createStackNavigator(pilha de navegação)
    const Stack = createStackNavigator();


//VAMOS Criar Container, o Navegador e as Telas de navegação ENGLOBADA PELO Context
    return (
     
       <UserContextProfile>
      <NavigationContainer>
          <Stack.Navigator
          initialRouteName="Preload" 
         >
          <Stack.Screen name="Preload" component={Preload}   options={{headerShown:false}}
          // EXIBINDO uma tela Preload ---vai ficar um de cada vez (DEFINR A PRIMEIRA EM  <Stack.Navigator initialRouteName="Preload">)
          />
           <Stack.Screen name="SignIn" component={SignIn}   options={{headerShown:false}}/>
           <Stack.Screen name="SignUp" component={SignUp}   options={{headerShown:false}}/>
           <Stack.Screen name="MainTab" component={MainTab}   options={{headerShown:false}}/>
          </Stack.Navigator>
      </NavigationContainer>

   </UserContextProfile>
    );
}

--OK PERFEITO DEU CERTO

---OBSERVAÇÕES ----Temos que ver o dispatch (não funcionou)

30---TEMOS QUE INSTALAR O styled-component (Ja deviamos ter instalado antes)

# npm install --save styled-components

------------

31------VAMOS FAZER UM compomenmtes CUSTOTABBAR.JS No diretorio componentes
---IMPORTAR import styled from "styled-components/native"; que acabamos de Instalar
---O COMPONENTES FICA ASSIM POR ENQUANTO (vazio)
import React from "react";
import styled  from 'styled-components';

//CRIAR UMA SACOLA (textarea) estilizada
const TabArea = styled.view`
height: 60px;
background-color: #4EADBE;
flex-direction: row;
`;

export default () => {
  
    return (
        //CRIA NOSSO COMPONENTE TABAREA
        <TabArea>


        </TabArea>

    );
}


32------VAMOS IMPORTA ELE (CustomTabBar) LA PARA O MainTab e MANDAR USAR-LO PASSANDO AS PROPRIEDADE PARA 
O COMPONETEN QUE VAI RECEBER-LO
---VAMOS LA NO MainTab.js E FICA ASSIM:  (escondeu a navegação, mas vamos edtilizar a nosso modo)
import React from "react";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";

import Home from '../screens/Home';
import Search from '../screens/Search';
import Appointments from '../screens/Appointments';
import Favorites from '../screens/Favorites';
import Profile from '../screens/Profile';

import CustomTabBar from "../../componentes/CustomTabBar";


const Tab = createBottomTabNavigator();

export default () => (
/* importa o TabArea e usa ele passando as propriedade (props)  */
    <Tab.Navigator tabBar={props=><CustomTabBar {...props} />}>
         <Tab.Screen   name="Home"   component={Home}  /* tem que criar esse componente  */ />
         <Tab.Screen   name="Search"   component={Search}/>
         <Tab.Screen   name="Appointments"   component={Appointments}/>
         <Tab.Screen   name="Favorites"   component={Favorites}/>
         <Tab.Screen   name="Profile"   component={Profile}/>



    </Tab.Navigator>
)

-----ESCONDEU A NAVEGAÇÃO

33-----VAMOS COLOCAR OS ITENS NO TABAREA do CustomTabBar (Cinco itens) - PARA FAZER A NAVEGAÇÃO POR ELES
------IMPORTAR ICON (as imagens ) no CustomTabBar
---CRIAR COMPONENTES ESTILIZADAS (TabArea, TabItem)
//CRIAR UMA SACOLA (textarea) estilizada
const TabArea = styled.View`
height: 60px;
background-color: #4EADBE;
flex-direction: row;
`;

const TabItem = styled.TouchableOpacity`
    flex: 1;
    justify-content: center;
    align-items: center;
   
`;

---E COLOCAR OS ITEM 
export default () => {
  
    return (
        //CRIA NOSSO COMPONENTE TABAREA e colocar item
        <TabArea>
           
            <TabItem>
            <Text>Today</Text>
            </TabItem>

            <TabItem>
           <Text>Today</Text>
            </TabItem>

            <TabItem>
           <Text>Favorite</Text>
            </TabItem>

            <TabItem>
           <Text>Account</Text>
            </TabItem>
            <TabItem>
           <Text>Appointments</Text>
            </TabItem>
        </TabArea>

    );
}

-----A NOSSA CustomTabBar FICA ASSIM:   ---NÃO CONSEGUI COLOCAR OS Icons ----NÃO CONSEGUIR ************ (importar nem os icon e nem o UserContext)

import React from "react";
import { Image, Text } from "react-native";
import styled  from 'styled-components';
//IMPORTAR ICON
/*
import HomeIcon from '../assets/images/cadeado.png';

import SearchIcon from '.../assets/search.svg';
import TodayIcon from '../assets/today.svg';
import FavoriteIcon from '../assets/favorite.svg';
import AccountIcon from '../assets/images/user.png';
<HomeIcon width="24"  heigth="24" fill='#fff'  />
<Image style={{width:"24" , heigth:"24", fill:'#fff'}} source={require('././assets/images/today.png')} />
import HomeIcon from '../../assets/images/Home.png';
*/

//CRIAR UMA SACOLA (textarea) estilizada
const TabArea = styled.View`
height: 60px;
background-color: #4EADBE;
flex-direction: row;
`;

const TabItem = styled.TouchableOpacity`
    flex: 1;
    justify-content: center;
    align-items: center;
   
`;


export default () => {
  
    return (
        //CRIA NOSSO COMPONENTE TABAREA e colocar item
        /*
         ERA PARA SER ASSIM OS ITEM COM ICON
         import HomeIcon from '../../assets/images/Home.png';
         <TabItem>
                 <HomeIcon />
            </TabItem>
        */
        <TabArea>
           
           
            <TabItem>
            <Text>Home</Text>
            </TabItem>

            <TabItem>
           <Text>Today</Text>
            </TabItem>

            <TabItem>
           <Text>Favorite</Text>
            </TabItem>

            <TabItem>
           <Text>Account</Text>
            </TabItem>
            <TabItem>
           <Text>Appointments</Text>
            </TabItem>
        </TabArea>

    );
}


-----------------VAMOS SEGUIR

34------VAMOS FAZER AS AÇÕES DE CADA UM COM onPress (ERA PARA SSER COM OS ICONS)
 ---ANTES VAMOS FAZER UMA FUNÇÂO DE NAVAGAR (goto)
 --- //CRIA  FUNÇÃO DE NAVEGAÇÃO goto e a USA LA EM onPress
---MAS AGORA A NOSSA FUNÇÂO PRINCIPAL VAI RECEBER DUAS props (PROPRIEDADE state e navigation)

-----A CustomTabBar FICA ASIM JA NAVEGANDO ENTRE AS TELAS (UMA PENA - faltan o icon)
import React from "react";
import { Image, Text } from "react-native";
import styled  from 'styled-components';
//IMPORTAR ICON
/*
import HomeIcon from '../assets/images/cadeado.png';

import SearchIcon from '.../assets/search.svg';
import TodayIcon from '../assets/today.svg';
import FavoriteIcon from '../assets/favorite.svg';
import AccountIcon from '../assets/images/user.png';
<HomeIcon width="24"  heigth="24" fill='#fff'  />
<Image style={{width:"24" , heigth:"24", fill:'#fff'}} source={require('././assets/images/today.png')} />
import HomeIcon from '../../assets/images/Home.png';
*/



//CRIAR UMA SACOLA (textarea) estilizada
const TabArea = styled.View`
height: 60px;
background-color: #4EADBE;
flex-direction: row;
`;

const TabItem = styled.TouchableOpacity`
    flex: 1;
    justify-content: center;
    align-items: center;
   
`;


export default ({state, navigation}) => {
  
     //CRIA  FUNÇÃO DE NAVEGAÇÃO goto e a USA LA EM onPress

     const goTo = (screenName) => {
            navigation.navigate(screenName);


     }
      
    return (
        //CRIA NOSSO COMPONENTE TABAREA e colocar item
        /*
         ERA PARA SER ASSIM OS ITEM COM ICON
         import HomeIcon from '../../assets/images/Home.png';
         <TabItem>
                 <HomeIcon />
            </TabItem>
        */
        <TabArea>
           
           
            <TabItem onPress={()=>goTo('Home')}>
            <Text>Home</Text>
            </TabItem>

             <TabItem onPress={()=>goTo('Search')}>
           <Text>Search</Text>
            </TabItem>

            <TabItem onPress={()=>goTo('Appointments')}>
           <Text>Appointments</Text>
            </TabItem>

           <TabItem onPress={()=>goTo('Favorites')}>
           <Text>Favorite</Text>
            </TabItem>

            <TabItem onPress={()=>goTo('Profile')}>
           <Text>Account</Text>
            </TabItem>
            
        </TabArea>

    );
}


35-----VAMOS FAZER UM EFEITO CO A OPACIDADE DO ITEM
----SE O STATE (state.index===0) QUE TIVER ATIVADO A OPACIDADE VAI SER 1 DO CONTRARIO VAI SER 0,5
---O ZERO É A POSIÇÂO DO State (ITEM)

          <TabItem onPress={()=>goTo('Home')}>
            <Text style={{opacity: state.index===0? 1 : 0.5}}>Home</Text >
            </TabItem>

             <TabItem onPress={()=>goTo('Search')}>
           <Text style={{opacity: state.index===1? 1 : 0.5}}>Search</Text>
            </TabItem>


--------------------
36- O DO MEIO VAI FICA MAOIR - VAMOS FAZER UM COMPONENTES (TouchableOpacity) DIFERENTE PARA ELE
const TabItemCenter = styled.TouchableOpacity`
    width: 70px;
    height: 70px;
    justify-content: center;
    align-items: center;
    background-color: #FFF;
    border-radius: 35px;
    border: 3px solid #4EADBE;
    margin-top: -20px;
`;

---E SUBSTITUIR O TabItem pelo TabItemCenter

   <TabItemCenter onPress={()=>goTo('Appointments')}>
           <Text style={{opacity: state.index===2? 1 : 0.5}}>Appointments</Text>
            </TabItemCenter>

-----------ok PERFEITO

----NÃO CONSEGUIR ************ (importar nem os icon e nem o UserContext)

37----AVATAR----- Pra colocar o AVATAR precisamos pegar informação do contexto , declarar useContext LA EM CIMA
--E IMPORTAMOS O UserContext QUE CRIAMOS EM contexts
import { UserContext } from '../contexts/UserContext';

FAREMOS UM COMPONENTE PARA O AVATAR 
const AvatarIcon = styled.Image`
    width: 24px;
    height: 24px;
    border-radius: 12px;
`;
---FAREMOS UMA VARIAVEL PARA O UserContext E RENOMEAREMOS PARA USer
 // CHAMAREMOS UserContext SO DE User
    const {state:User} = useContext(UserContext);

---E NA TabItem FAREMOS A OPÇÂO (SE O USUSARO DECLAROU OU INCLUIU AVATAR USAR O COMPONENTE SE NÃO USA O TabItem)
<TabItem onPress={()=>goTo('Profile')}>
                {user.avatar != '' ?
                    <AvatarIcon source={{uri: user.avatar}} />
                    :
                    <AccountIcon style={{opacity: state.index===4? 1 : 0.5}} width="24" height="24" fill="#FFFFFF" />
                }
            </TabItem>
---NÃO CONSEGUIR ************ (importar nem os icon e nem o UserContext)


VAMOS SEGUIR SEM ICOM E SEM AVATAR

38---TELA Home
---VAMOS FAZER A TELA estilo.js O NOSSOS COMPONETENETS ESTILIZADOS EM Styled
import React from 'react';
import styled from 'styled-components/native';

export const Container = styled.SafeAreaView`
    flex: 1;
    background-color: #63C2D1;
`;

---JA QUE RESOLVEMOS FAZER O Styled NA PASTA estilo.js da PASTA css VAMOS IMPORTAR_LO
PARA HOME E USAR OS COMPONENTES FEITO ALI

---DE INCIO NOSSSA Home.js FICA ASSSIM;
import React from 'react'
import { Text, View, Image } from 'react-native'
import css from '../assets/css/Css'
import { Container } from '../assets/css/estilo'

export default () => {

    return (

            <Container>
                    <Text>
                        Home        
                    </Text>
                
            </Container>

       /*

     <View style = {css.container}>
         <Image style={{width:100, height:100, borderRadius:100}} source={require('../assets/images/today.png')} />
        <Text>
            Home        
        </Text>
       </View>
    */

    );

}

39---CONFECCIONANDO A TELA HOME
-------------A NOSSA TELA VAI TER UM SCROL  E DENTRO DELE QUE VAMOS DESENHAR NOSSA TELA

-------EM CIMA VAI TER UM CABEÇA^HOS (helders) com UM TEXTO E UM BOTÃO CONTENDO UM ICON
  <HeaderArea>
                            <HeaderTitle numberOfLines={2}>Encontre o seu barbeiro favorito</HeaderTitle>
                                 <SearchButton onPress={()=>navigation.navigate('Search')}>
                                    <SearchIcon width="26" height="26" fill="#FFFFFF" />
                                </SearchButton>
                        </HeaderArea>

-------VAMOS TER TABEM UMA AREA DE LOCALIZAÇÂO
                <LocationArea>
                            <LocationInput
                                placeholder="Onde você está?"
                                placeholderTextColor="#FFFFFF"
                                value={locationText}
                                onChangeText={t=>setLocationText(t)}
                                onEndEditing={handleLocationSearch}
                            />
                            <LocationFinder onPress={handleLocationFinder}>
                                <MyLocationIcon width="24" height="24" fill="#FFFFFF" />
                            </LocationFinder>
                 </LocationArea>
---------------
-------PRECISAMOS ESTILIZAR (na TELA css.estilo) ESSE COMPONENTES E IMPORTARL-LOS
import { Container,
    Scroller,
    HeaderArea,
    HeaderTitle,
    SearchButton,
    LocationArea,
    LocationInput,
    LocationFinder,
    LoadingIcon,
    ListArea
} from '../assets/css/estilo'

---DFAREMOS NA estilo.js QUE VAI FICAR ASSIM:
import React from 'react';
import styled from 'styled-components/native';

export const Container = styled.SafeAreaView`
    flex: 1;
    background-color: #63C2D1;
`;

export const Scroller = styled.ScrollView`
    flex: 1;
    padding: 20px;
`;

export const HeaderArea = styled.View`
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
`;
export const HeaderTitle = styled.Text`
    width: 250px;
    font-size: 24px;
    font-weight: bold;
    color: #FFF;
`;
export const SearchButton = styled.TouchableOpacity`
    width: 26px;
    height: 26px;
`;

export const LocationArea = styled.View`
    background-color: #4EADBE;
    height: 60px;
    border-radius: 30px;
    flex-direction: row;
    align-items: center;
    padding-left: 20px;
    padding-right: 20px;
    margin-top: 30px;
`;
export const LocationInput = styled.TextInput`
    flex: 1;
    font-size: 16px;
    color: #FFFFFF;
`;
export const LocationFinder = styled.TouchableOpacity`
    width: 24px;
    height: 24px;
`;
export const LoadingIcon = styled.ActivityIndicator`
    margin-top: 50px;
`;
export const ListArea = styled.View`
    margin-top: 30px;
    margin-bottom: 30px;
`;


--------NÃO CONSEGUIR COLOCAR AS IMAGENS COMO COMPOMETES , FIZ PELO IMAGE
----SUBSTITUIR <SearchIcon width="26" height="26" fill="#FFFFFF" /> POR <Image>
---O Container FICA ASSIM INICIALMENTE

   <Container>
                    <Scroller>
                        <HeaderArea>
                            <HeaderTitle >Encontre o seu barbeiro favorito</HeaderTitle>
                                 <SearchButton >
                                 // <SearchIcon width="26" height="26" fill="#FFFFFF" />
                                 <Image
                                 style={{  width:26, height:26, backgroundColor:'#fff' }}
                                 source={require('../assets/images/profile.png')}
                                    />
                                </SearchButton>
                        </HeaderArea>
                    </Scroller>
    </Container>


40----VAMOS IMPORTAR O useNavigation e declarar-lo  NA NOSSA FUNÇÃO- PARA IR TESTASTANDO
import { useNavigation } from '@react-navigation/native'
---E DECLARA DENTRO DA FUNÇÃO

export default () => {
 
    const navigation = useNavigation();

    return (

            <Container>

---ASSIM PODEMOS TEsTAR A NAVEGAÇÂO DENTRO DA TELA...ATRAVES DE ONPRESS, EXEMPLO NO BOTAO
TouchableOpacity SearchButton DO CABEÇALHO            
<SearchButton onPress={()=>navigation.navigate('Search')}>

41--------VAMOS PARA LOCALIZAÇÃO 
---NECESSARIO TEMOS UM State para CONTRALAR AS MODIFICAÇÕES DE ESTADO
---VAMOS IMPORTAR o useState do REact e declara-LOS -CRIAR STAST
import React,{useState} from 'react'
---CRIAR ESTADO DENTRO DA NOSSA FUNÇÃO
export default () => {
 
    const navigation = useNavigation();
    const [locationText, setLocationText] = useState('');
    return (
-----------E USA LA NO ImputTEXT NA PROPRIEDADE Value e onChangeText QUANDO O USUSARIO MODIFICAR O TEXT 
(o texto digitada assume o estado, isso é fica salvo no state criado)  

 <LocationInput
                                placeholder="Onde você está?"
                                placeholderTextColor="#FFFFFF"
                                value={locationText}
                                onChangeText={t=>setLocationText(t)} // MUDOU TEXT , MODIFICA State
                            />
42-----PEGAR A LOCALIZAÇÃO (icone)
---PARA PEGAR PRECISAMOS USAR AS BIBLIOTECAS request, PERMISSION 
---INSTALAR DEPENDENCIAS
# npm install --save react-native-permissions
---INSTALAR TAMBEM geolocation
# npm install @react-native-community/geolocation --save
----E AINDA puxar o IMPORT DE platform do react-native PARA SABER EM QUE PLATAFORMA O APP ESTA RODANDO
---E IMPORTAR AS BIBLIOTECAS
import { Platform } from 'react-native'
import { request, PERMISSIONS } from 'react-native-permissions'
----VAMOS USAR O LoadingIcon (compomente CRIADA la em estilo) PARA INDICAR SE ESTA PROCURANDO
---VAMOS COLOCA-LO ABAIXO DA LocationArea
                  />
                            </LocationFinder>
                 </LocationArea>
                 <LoadingIcon size="large" color="#FFFFFF" />
                     </Scroller>

----JA AAPRECE NA TELA
---PARA APARARECER SO QUANDO FOR chamado
 {loading &&
                  <LoadingIcon size="large" color="#FFFFFF" />
                 }

43-------VAMOS TER QUE IR LA EM api.js E FAZER UMA API PARA OS PROFISSIONAIS e depois levar para Home.js

---LA EM Api.js IMPORT AsyncStorage
import AsyncStorage from "@react-native-async-storage/async-storage";
---E FAZ A FUNÇÃO sem se preocupar com localização por enquanto
// FUNÇÂO LISTA DOS PROFISSIONAIS
       //COMEÇA ZERA DADOS
        getBarbers: async (lat=null, lng=null, address=null) => {
             //PEGA O TOKEN
        const token = await AsyncStorage.getItem('token');

        console.log("LAT", lat);
        console.log("LNG", lng);
        console.log("ADDRESS", address);

        const req = await fetch(`${BASE_API}/barbers?token=${token}&lat=${lat}&lng=${lng}&address=${address}`);
        const json = await req.json();
        return json;
    }
--------VAMOS LA EM HOME E Importa A API
import Api from '../Api'

44---FAZER COMPONENTE BarberItem.js em componentes
---COMPONENTE BarberItem FICA ASSIM
import React from 'react';
import styled from 'styled-components/native';

import Stars from '../components/Stars';

const Area = styled.TouchableOpacity`
    background-color: #FFFFFF;
    margin-bottom: 20px;
    border-radius: 20px;
    padding: 15px;
    flex-direction: row;
`;

const Avatar = styled.Image`
    width: 88px;
    height: 88px;
    border-radius: 20px;
`;

const InfoArea = styled.View`
    margin-left: 20px;
    justify-content: space-between;
`;

const UserName = styled.Text`
    font-size: 17px;
    font-weight: bold;
`;

const SeeProfileButton = styled.View`
    width: 85px;
    height: 26px;
    border: 1px solid #4EADBE;
    border-radius: 10px;
    justify-content: center;
    align-items: center;
`;

const SeeProfileButtonText = styled.Text`
    font-size: 13px;
    color: #268596;
`;


export default ({data}) => {
    return (
        <Area>
            <Avatar source={{uri: data.avatar}} />
            <InfoArea>
                <UserName>{data.name}</UserName>

                <Stars stars={data.stars} showNumber={true} />

                <SeeProfileButton>
                    <SeeProfileButtonText>Ver Perfil</SeeProfileButtonText>
                </SeeProfileButton>
            </InfoArea>
        </Area>
    );
}

------FAZER






------- 2:59











~~~~~~~~~~~~~~~~~~~~~~








----Tela de SignUp.js



10-----VAMOS IMPORTAR ESSAS TELA PARA NOSSA PILHAS (MainStack)


XXXXXXXXXX VOLTAR E COLOCAR return


---App->screens->login->loginscreens.tsx

----OK VAMOS PARA Navigation
---Olha o site oficial (https://reactnavigation.org/)--RED DOCS->GET Start

# npm install react-native-reanimated  ---PULEI ESSA
# npm install react-native-gesture-handler  
# npm install @react-native-community/masked-view  ---PULEI ESSA


# npm install @react-navigation/drawer
---PRIMEIRA TEMOS QUE INSTALAR A DEPENDENCIA DO AsyncStorage

# npm install @react-native-community/async-storage   --DEU ERRO COMO SEMPRE, QUEBREI A DEPENDENCIA A FORÇA 
# npm install @react-native-community/async-storage --force ---USEI ESSA
# npm install react-native-maps --save-exact
BD1---BD Sqligfe
---FAZ UM BD uff8_genaral_ci
---Instalar Squilfe
# npm install --save sequelize

---VER DOCUMENTAÇÂO
---VAMOS EM MENU ->migration
# npm install --save-dev sequelize-cli
--E DEPOIS RODA O COMANDO PARA INICIAR (uso)
# npx sequelize-cli init


---VAI CRIAR NO PROJETO AS PASTAS DE migration, moldels, seedrs e config 
---NA DOCUMENTAÇÃO TEM COMO CRIARMOS NOSSA moldels
 // npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string

-- --Vamos mudar o nosso MIGRATIONS E models  User
#  npx sequelize-cli model:generate --name User --attributes name:string,password:string,email:string,balance:float

-- --Vamos mudar o nosso MIGRATIONS models  Pokemon
#  npx sequelize-cli model:generate --name Pokemon --attributes name:string,price:float,image:string,userId:integer 

--VAMOS FAZER UMA CHAVE ESTRANGEIRA NA MIGRATIONS Pokemon
--VAMOS LA EM MIGRATIONS Pokemon->UserId e dix que ela faz referencia ao id da tabela Users

@ userId: {
        type: Sequelize.INTEGER,
        references:{
          model:'users',
          key:'id'
        },
         onUpdate:'cascade',
         onDelete:'cascade'
---AGORA PODE RODAR A Migrate de ja CRIA AS TABELAS    
# npx sequelize-cli db:migrate

----DEU ERRO() Please install mysql2 package manually)

--INSTALEI O PACOTE mysql2
# npm install -g mysql2
# npm install mysql2 --save
