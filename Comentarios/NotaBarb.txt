site
https://github.com/react-native-async-storage/async-storage
React Native.dev -> Get Started -> environment Setup
->Setting up the development environment
https://callstack.github.io/react-native-paper/

-->  React Native CLI Quickstart ->Windows->Android

-->Instalar Chocolaty -> Get Startes ---AGORA USA O POWSHEL (administrador)
# Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = 
[System.Net.ServicePointManager]::
SecurityProtocol -bor 3072; iex 
((New-Object System.Net.WebClient).
DownloadString('https://community.chocolatey.org/install.ps1'))

# choco install -y nodejs.install openjdk8

-->Instalat Android Studio

--> Configurar variaveis de ambientes

ANDROID_HOME -> C:\Users\barbosa\AppData\Local\Android\Sdk

path ->usuario ---C:\Users\barbosa\AppData\Local\Android\Sdk\platform-tools

1- INICIO APP
---> ABRE PRONT DE COMANDO - No diretório desejado

# npx react-native init Barb

2 - USAR EDITOR DE CODIGO _ Visual studio\sublime
--Abre o folder do app (pasta)

3 - Para RODAR

# npx react-native run-android

--E DEIXO A VIEW SOMENTE COM O CODIGO ABAIXO (Só para testar)
import React, {component} from "react";
import {View, Text, TextInput, StyleSheet, TimePickerAndroid, TouchableOpacity} from 'react-native';

export  default  function Barb(){
return(
  <View>

    <View>
      <Text>oi meu DEUS</Text>
   
    </View>

      <View>
      <Text>oi meu DEUS</Text>
    
    </View>

    </View>
);

};
--------
4--UTILIZAR BIBLIOTECA 

# npm install react-native-paper  --NÃO USEI


5---PACOTE de Icons

# npm install react-native-vector-icons  -----NÃO USEI

6---VAMOS CRIAR UMA PASTA NA RAIZ (barb) E COLOCAR TODAS AS TELAS e Componentes do NOSSO SISTEMA

7---------VAMOS FAZER em APP.js a navegação de nossa pilha (stacks) que vamos criar no diretorio barb

---Em App.js
---Precisamos instalar algunas DEPEDENCIAS
# npm install @react-navigation/native 
# npm install @react-navigation/native @react-navigation/stack --(instalei os dois juntos)
# npm install react-native-screens react-native-safe-area-context
# npm install react-native-gesture-handler  
# npm install @react-navigation/bottom-tabs  ------NÃO INSTALEI
# npm install @react-navigation/drawer
# npm install styled-components
# npm install --save styled-components   ---Não se é preciso


---E App.js Fica ASSIM:
-----ASSIM
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import Preload from "./barb/screens/preload";
//import Cadastro from './barb/screens/preload';

export default function App() {
  //VAMOS Criar nossa PILHA que vai receber o retorno do createStackNavigator(pilha de navegação)
    const Stack = createStackNavigator();

    return (
       //VAMOS Criar Container, o Navegador e as Telas de navegação
      <NavigationContainer>
          <Stack.Navigator initialRouteName="Preload">
          <Stack.Screen name="Preload" component={Preload} options={{headerShown:false}} />
           
         
          </Stack.Navigator>
      </NavigationContainer>
    );

------OU ASSIM (com as propriedade para todoas os stack (telas))

<NavigationContainer>
          <Stack.Navigator
          initialRouteName="Preload" 
          >
          <Stack.Screen name="Preload" component={Preload} options={{headerShown:false}} 
          // EXIBINDO uma tela Preload ---vai ficar um de cada vez (DEFINR A PRIMEIRA EM  <Stack.Navigator initialRouteName="Preload">)
          />


8----VAMOS FAZER NOSSO ESTILOS EM barb\assets\css\Css.js
import { StyleSheet } from "react-native";


 const css = StyleSheet.create({

    container: {
        flex: 1,
        alignItems: 'center'
    },
    container__center:{
        justifyContent:'center'
    },
    map:{
            height:'60%', 
          
            width : 400 , 
            justifyContent : 'flex-end' , 
            alignItems : 'center' , 
           //  backgroundColor:'#00f'

    },
    search:{
        height:'40%',
        
       // backgroundColor:'gray'
    },

    header:{
        backgroundColor:'#09204A',
        padding: 5,
        width: '100%',
        height: '22%',
        paddingTop: 0,
        marginTop:0
    },
    header__img:{
        marginLeft: 'auto',
        marginRight:'auto'
    },
    footer:{
        width: '100%',
        height: '78%',
        alignItems: 'center',
        justifyContent:'center',
        backgroundColor:'#eee'
    },
    input:{
        borderRadius: 2,
        height: 60,
        padding: 10,
        backgroundColor: '#fff',
        borderWidth:1,
        borderColor:'#ccc',
        width: '80%',
        marginBottom: 20,
        fontSize: 18
    },
    texto:{
        fontSize: 20,
        textAlign:'center'
    },
    textoWidth:{
        width: '80%'
    },
    button:{
        borderRadius: 5,
        backgroundColor: '#111',
        paddingTop: 15,
        paddingRight: 30,
        paddingBottom: 15,
        paddingLeft: 30,
    },
    button__text:{
        color:'#fff',
        fontWeight:'bold',
        fontSize: 17
    }


});
export  default (css);


import styled from 'styled-components/native'
export const LoadingIcon = styled.ActivityIndicator`
    margin-top: 50px;
`;

9----VAMOS FAZER NOSSAS TELAS em  barb\screens

----Tela de Preload.js
import React, {useEffect} from "react";
import { StyleSheet,  View, Text, TouchableOpacity, loadingIcon, Image} from 'react-native';
import css, {LoadingIcon} from '../assets/css/Css'

//import {  Container, LoadingIcon } from './styles'

//import Cadastro from "./Cadastro";

// RECEBE como paramentro o navigation
export default function Preload({navigation}) {

  return (
      <View style={css.container}>

          <View style={css.header}>
              <Image style={css.header__img} source={require('../assets/images/barber.png')} />
              <LoadingIcon size="large" color="#FFFFFF" />
          </View>

          
      </View>
  );
}

!0----- OK (Visualmente esta Ok , vamos fazer funcionar)

---Instalar
# npm install @react-native-community/async-storage  ---NÃO CONSEFUI INSTALAR
# npm install @react-native-async-storage/async-storage
----IMPORTAR 
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useNavigation } from "@react-navigation/native";


--NESSE MOMENTO A Preload.js esta assim, e não temos token , assm sendo pula direto pata SignIn.js
import React, {useEffect} from "react";
import { StyleSheet,  View, Text, TouchableOpacity, loadingIcon, Image} from 'react-native';
import css, {LoadingIcon} from '../assets/css/Css'
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useNavigation } from "@react-navigation/native";
//import {  Container, LoadingIcon } from './styles'
//import Cadastro from "./Cadastro";

// RECEBE como paramentro o navigation
export default ()=> {

//VAmos criar uma variavel
const navigation=useNavigation();


// TODA VEZ QUE A TELA ABRIR EXECUTE ESSE CODIGO
useEffect(()=>{
//Verificar token
  const checkToken= async ()=>{
        //Pegar um token se exixtir no aplicativo
         const token = await AsyncStorage.getItem('token');
        
      //  if(token !== null){
            // OU ASSIM
            if(token ){
           // Se não for nulo (se existir) validar token
            
        }else{
            //Se não tiver Token Manda para o login
             navigation.navigate('SignIn');
        }
  }
//Executar
  checkToken();

}, [])


  return (
      <View style={css.container}>

          <View style={css.header}>
              <Image style={css.header__img} source={require('../assets/images/barber.png')} />
              <LoadingIcon size="large" color="#FFFFFF" />
          </View>

          
      </View>
  );
}

------- E A Tela de SignIn.js (so para puxar---AINDA VAI SER FEITA)
import React from "react";
import { View, Text } from "react-native";

export  default  function App1(){
    return(
      <View >
        
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
        </View>
    );
}

11---VAMOS FAZER AGORA a Configuração do contexts na pasta barb\contexts
PARA lidar com as informações do usuario e a redurces para armazenar ESSAS 
informações

----contexts.UserContext.js
import React, {createContext, useReducer} from "react";

// IMPORTAR as Informações do UserReducer.js
import { InitialState, UserReducer  } from "../reducers/UserReducer";
// CRIAR um contexto do usauario
export const UserContext=createContext();


// CRIAR o componente especifico do contexto em uma arrayfuction usando uma profile (perfil) chamado children
// Children é tudo que tem dentro do componente
export default ({children})=>{
    // CRIAR os dois paramentro que a gente precisa usar no Reducer--Vamos utilizar-lo
    const [state, dispatch] = useReducer(UserReducer, InitialState);
    // CRIOU os dois e passar agora para o profile (perfil) atraves da propriedade value
        return (
            <UserContext.Provider value= {{state, dispatch}} >
             {children}

            </UserContext.Provider>

    );

}

----reducers.UserReducer.js
export const InitialState = {
//INFORMAÇões (conteudo) iniciais do usuario logado
avatar:'',
favorites:[],
appointmenst:[]
};

export const UserReducer = (state, action)=> {
    switch(action.type) {
        case 'setAvatar':
            //Pegar o conteudo inicial e alterar Avatar
            return {...state, avatar: action.payload.avatar};
        break;
        default:
            return state;
 
    }
}



12----CRIADO O CONTEXT VAMOS USAR-LO App.js ENVOLVENDO TODO NOSSO aplicativo
---App.js
--Primeiro importa o context
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import Preload from "./barb/screens/preload";
import SignIn from './barb/screens/SignIn';
// IMPORTAT CONTEXT que ira  ENGLOBAR O APLICATIVO (NavigationContainer)
import UserContextProfile from './barb/contexts/UserContext';

export default function App() {
  
  //VAMOS Criar nossa PILHA que vai receber o retorno do createStackNavigator(pilha de navegação)
    const Stack = createStackNavigator();


//VAMOS Criar Container, o Navegador e as Telas de navegação ENGLOBADA PELO Context
    return (
     
       <UserContextProfile>
      <NavigationContainer>
          <Stack.Navigator
          initialRouteName="Preload" 
         >
          <Stack.Screen name="Preload" component={Preload}   options={{headerShown:false}}
          // EXIBINDO uma tela Preload ---vai ficar um de cada vez (DEFINR A PRIMEIRA EM  <Stack.Navigator initialRouteName="Preload">)
          />
           <Stack.Screen name="SignIn" component={SignIn}   options={{headerShown:false}}/>
          </Stack.Navigator>
      </NavigationContainer>

   </UserContextProfile>
    );
}

---Ok PERFEITO 

13---FAZER A SEGUNDA TELA (SignIn)

---VAMOS FAZER COmpomentes para usar qando desejar







----Tela de SignUp.js



10-----VAMOS IMPORTAR ESSAS TELA PARA NOSSA PILHAS (MainStack)


XXXXXXXXXX VOLTAR E COLOCAR return


---App->screens->login->loginscreens.tsx

----OK VAMOS PARA Navigation
---Olha o site oficial (https://reactnavigation.org/)--RED DOCS->GET Start

# npm install react-native-reanimated  ---PULEI ESSA
# npm install react-native-gesture-handler  
# npm install @react-native-community/masked-view  ---PULEI ESSA

# npm install @react-navigation/bottom-tabs  
# npm install @react-navigation/drawer
---PRIMEIRA TEMOS QUE INSTALAR A DEPENDENCIA DO AsyncStorage

# npm install @react-native-community/async-storage   --DEU ERRO COMO SEMPRE, QUEBREI A DEPENDENCIA A FORÇA 
# npm install @react-native-community/async-storage --force ---USEI ESSA
# npm install react-native-maps --save-exact
BD1---BD Sqligfe
---FAZ UM BD uff8_genaral_ci
---Instalar Squilfe
# npm install --save sequelize

---VER DOCUMENTAÇÂO
---VAMOS EM MENU ->migration
# npm install --save-dev sequelize-cli
--E DEPOIS RODA O COMANDO PARA INICIAR (uso)
# npx sequelize-cli init


---VAI CRIAR NO PROJETO AS PASTAS DE migration, moldels, seedrs e config 
---NA DOCUMENTAÇÃO TEM COMO CRIARMOS NOSSA moldels
 // npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string

-- --Vamos mudar o nosso MIGRATIONS E models  User
#  npx sequelize-cli model:generate --name User --attributes name:string,password:string,email:string,balance:float

-- --Vamos mudar o nosso MIGRATIONS models  Pokemon
#  npx sequelize-cli model:generate --name Pokemon --attributes name:string,price:float,image:string,userId:integer 

--VAMOS FAZER UMA CHAVE ESTRANGEIRA NA MIGRATIONS Pokemon
--VAMOS LA EM MIGRATIONS Pokemon->UserId e dix que ela faz referencia ao id da tabela Users

@ userId: {
        type: Sequelize.INTEGER,
        references:{
          model:'users',
          key:'id'
        },
         onUpdate:'cascade',
         onDelete:'cascade'
---AGORA PODE RODAR A Migrate de ja CRIA AS TABELAS    
# npx sequelize-cli db:migrate

----DEU ERRO() Please install mysql2 package manually)

--INSTALEI O PACOTE mysql2
# npm install -g mysql2
# npm install mysql2 --save
