site
https://github.com/react-native-async-storage/async-storage
React Native.dev -> Get Started -> environment Setup
->Setting up the development environment
https://callstack.github.io/react-native-paper/

-->  React Native CLI Quickstart ->Windows->Android

-->Instalar Chocolaty -> Get Startes ---AGORA USA O POWSHEL (administrador)
# Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = 
[System.Net.ServicePointManager]::
SecurityProtocol -bor 3072; iex 
((New-Object System.Net.WebClient).
DownloadString('https://community.chocolatey.org/install.ps1'))

# choco install -y nodejs.install openjdk8

-->Instalat Android Studio

--> Configurar variaveis de ambientes

ANDROID_HOME -> C:\Users\barbosa\AppData\Local\Android\Sdk

path ->usuario ---C:\Users\barbosa\AppData\Local\Android\Sdk\platform-tools

1- INICIO APP
---> ABRE PRONT DE COMANDO - No diretório desejado

# npx react-native init Barb

2 - USAR EDITOR DE CODIGO _ Visual studio\sublime
--Abre o folder do app (pasta)

3 - Para RODAR

# npx react-native run-android

--E DEIXO A VIEW SOMENTE COM O CODIGO ABAIXO (Só para testar)
import React, {component} from "react";
import {View, Text, TextInput, StyleSheet, TimePickerAndroid, TouchableOpacity} from 'react-native';

export  default  function Barb(){
return(
  <View>

    <View>
      <Text>oi meu DEUS</Text>
   
    </View>

      <View>
      <Text>oi meu DEUS</Text>
    
    </View>

    </View>
);

};
--------
4--UTILIZAR BIBLIOTECA 

# npm install react-native-paper  --NÃO USEI


5---PACOTE de Icons

# npm install react-native-vector-icons  -----NÃO USEI

6---VAMOS CRIAR UMA PASTA NA RAIZ (barb) E COLOCAR TODAS AS TELAS e Componentes do NOSSO SISTEMA

7---------VAMOS FAZER em APP.js a navegação de nossa pilha (stacks) que vamos criar no diretorio barb

---Em App.js
---Precisamos instalar algunas DEPEDENCIAS
# npm install @react-navigation/native 
# npm install @react-navigation/native @react-navigation/stack --(instalei os dois juntos)
# npm install react-native-screens react-native-safe-area-context
# npm install react-native-gesture-handler  
# npm install @react-navigation/bottom-tabs  ------NÃO INSTALEI
# npm install @react-navigation/drawer
# npm install styled-components
# npm install --save styled-components   ---Não se é preciso


---E App.js Fica ASSIM:
-----ASSIM
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import Preload from "./barb/screens/preload";
//import Cadastro from './barb/screens/preload';

export default function App() {
  //VAMOS Criar nossa PILHA que vai receber o retorno do createStackNavigator(pilha de navegação)
    const Stack = createStackNavigator();

    return (
       //VAMOS Criar Container, o Navegador e as Telas de navegação
      <NavigationContainer>
          <Stack.Navigator initialRouteName="Preload">
          <Stack.Screen name="Preload" component={Preload} options={{headerShown:false}} />
           
         
          </Stack.Navigator>
      </NavigationContainer>
    );

------OU ASSIM (com as propriedade para todoas os stack (telas))

<NavigationContainer>
          <Stack.Navigator
          initialRouteName="Preload" 
          >
          <Stack.Screen name="Preload" component={Preload} options={{headerShown:false}} 
          // EXIBINDO uma tela Preload ---vai ficar um de cada vez (DEFINR A PRIMEIRA EM  <Stack.Navigator initialRouteName="Preload">)
          />


8----VAMOS FAZER NOSSO ESTILOS EM barb\assets\css\Css.js
import { StyleSheet } from "react-native";


 const css = StyleSheet.create({

    container: {
        flex: 1,
        alignItems: 'center'
    },
    container__center:{
        justifyContent:'center'
    },
    map:{
            height:'60%', 
          
            width : 400 , 
            justifyContent : 'flex-end' , 
            alignItems : 'center' , 
           //  backgroundColor:'#00f'

    },
    search:{
        height:'40%',
        
       // backgroundColor:'gray'
    },

    header:{
        backgroundColor:'#09204A',
        padding: 5,
        width: '100%',
        height: '22%',
        paddingTop: 0,
        marginTop:0
    },
    header__img:{
        marginLeft: 'auto',
        marginRight:'auto'
    },
    footer:{
        width: '100%',
        height: '78%',
        alignItems: 'center',
        justifyContent:'center',
        backgroundColor:'#eee'
    },
    input:{
        borderRadius: 2,
        height: 60,
        padding: 10,
        backgroundColor: '#fff',
        borderWidth:1,
        borderColor:'#ccc',
        width: '80%',
        marginBottom: 20,
        fontSize: 18
    },
    texto:{
        fontSize: 20,
        textAlign:'center'
    },
    textoWidth:{
        width: '80%'
    },
    button:{
        borderRadius: 5,
        backgroundColor: '#111',
        paddingTop: 15,
        paddingRight: 30,
        paddingBottom: 15,
        paddingLeft: 30,
    },
    button__text:{
        color:'#fff',
        fontWeight:'bold',
        fontSize: 17
    }


});
export  default (css);


import styled from 'styled-components/native'
export const LoadingIcon = styled.ActivityIndicator`
    margin-top: 50px;
`;

9----VAMOS FAZER NOSSAS TELAS em  barb\screens

----Tela de Preload.js
import React, {useEffect} from "react";
import { StyleSheet,  View, Text, TouchableOpacity, loadingIcon, Image} from 'react-native';
import css, {LoadingIcon} from '../assets/css/Css'

//import {  Container, LoadingIcon } from './styles'

//import Cadastro from "./Cadastro";

// RECEBE como paramentro o navigation
export default function Preload({navigation}) {

  return (
      <View style={css.container}>

          <View style={css.header}>
              <Image style={css.header__img} source={require('../assets/images/barber.png')} />
              <LoadingIcon size="large" color="#FFFFFF" />
          </View>

          
      </View>
  );
}

!0----- OK (Visualmente esta Ok , vamos fazer funcionar)

---Instalar
# npm install @react-native-community/async-storage  ---NÃO CONSEFUI INSTALAR
# npm install @react-native-async-storage/async-storage
----IMPORTAR 
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useNavigation } from "@react-navigation/native";


--NESSE MOMENTO A Preload.js esta assim, e não temos token , assm sendo pula direto pata SignIn.js
import React, {useEffect} from "react";
import { StyleSheet,  View, Text, TouchableOpacity, loadingIcon, Image} from 'react-native';
import css, {LoadingIcon} from '../assets/css/Css'
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useNavigation } from "@react-navigation/native";
//import {  Container, LoadingIcon } from './styles'
//import Cadastro from "./Cadastro";

// RECEBE como paramentro o navigation
export default ()=> {

//VAmos criar uma variavel
const navigation=useNavigation();


// TODA VEZ QUE A TELA ABRIR EXECUTE ESSE CODIGO
useEffect(()=>{
//Verificar token
  const checkToken= async ()=>{
        //Pegar um token se exixtir no aplicativo
         const token = await AsyncStorage.getItem('token');
        
      //  if(token !== null){
            // OU ASSIM
            if(token ){
           // Se não for nulo (se existir) validar token
            
        }else{
            //Se não tiver Token Manda para o login
             navigation.navigate('SignIn');
        }
  }
//Executar
  checkToken();

}, [])


  return (
      <View style={css.container}>

          <View style={css.header}>
              <Image style={css.header__img} source={require('../assets/images/barber.png')} />
              <LoadingIcon size="large" color="#FFFFFF" />
          </View>

          
      </View>
  );
}

------- E A Tela de SignIn.js (so para puxar---AINDA VAI SER FEITA)
import React from "react";
import { View, Text } from "react-native";

export  default  function App1(){
    return(
      <View >
        
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
        </View>
    );
}

11---VAMOS FAZER AGORA a Configuração do contexts na pasta barb\contexts
PARA lidar com as informações do usuario e a redurces para armazenar ESSAS 
informações

----contexts.UserContext.js
import React, {createContext, useReducer} from "react";

// IMPORTAR as Informações do UserReducer.js
import { InitialState, UserReducer  } from "../reducers/UserReducer";
// CRIAR um contexto do usauario
export const UserContext=createContext();


// CRIAR o componente especifico do contexto em uma arrayfuction usando uma profile (perfil) chamado children
// Children é tudo que tem dentro do componente
export default ({children})=>{
    // CRIAR os dois paramentro que a gente precisa usar no Reducer--Vamos utilizar-lo
    const [state, dispatch] = useReducer(UserReducer, InitialState);
    // CRIOU os dois e passar agora para o profile (perfil) atraves da propriedade value
        return (
            <UserContext.Provider value= {{state, dispatch}} >
             {children}

            </UserContext.Provider>

    );

}

----reducers.UserReducer.js
export const InitialState = {
//INFORMAÇões (conteudo) iniciais do usuario logado
avatar:'',
favorites:[],
appointmenst:[]
};

export const UserReducer = (state, action)=> {
    switch(action.type) {
        case 'setAvatar':
            //Pegar o conteudo inicial e alterar Avatar
            return {...state, avatar: action.payload.avatar};
        break;
        default:
            return state;
 
    }
}



12----CRIADO O CONTEXT VAMOS USAR-LO App.js ENVOLVENDO TODO NOSSO aplicativo
---App.js
--Primeiro importa o context
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import Preload from "./barb/screens/preload";
import SignIn from './barb/screens/SignIn';
// IMPORTAT CONTEXT que ira  ENGLOBAR O APLICATIVO (NavigationContainer)
import UserContextProfile from './barb/contexts/UserContext';

export default function App() {
  
  //VAMOS Criar nossa PILHA que vai receber o retorno do createStackNavigator(pilha de navegação)
    const Stack = createStackNavigator();


//VAMOS Criar Container, o Navegador e as Telas de navegação ENGLOBADA PELO Context
    return (
     
       <UserContextProfile>
      <NavigationContainer>
          <Stack.Navigator
          initialRouteName="Preload" 
         >
          <Stack.Screen name="Preload" component={Preload}   options={{headerShown:false}}
          // EXIBINDO uma tela Preload ---vai ficar um de cada vez (DEFINR A PRIMEIRA EM  <Stack.Navigator initialRouteName="Preload">)
          />
           <Stack.Screen name="SignIn" component={SignIn}   options={{headerShown:false}}/>
          </Stack.Navigator>
      </NavigationContainer>

   </UserContextProfile>
    );
}

---Ok PERFEITO 

13---FAZER A SEGUNDA TELA (SignIn)

---VAMOS FAZER Compomentes para usar qando desejar

----Primeiramentes vamos fazer alguns componentes na tela com css
Depois a gente Faz EXTERNOS os componentes que serão comum as outras telas
---Estilizando a tela  SignIn.js FICA ASSIM (ainda falta os componentes externos)

import React from "react";
import { View, Text, Image, TouchableOpacity } from "react-native";
import css from '../assets/css/Css'


export  default  function App1(){
    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />

         <View style={css.inputArea}>

         //OS COMPONENTES EXTERNOS FICARÃO AQUI
       
           <TouchableOpacity style={css.CustonButton}>
             <Text style={css.button__text}  >Login</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton}>
            <Text style={css.TextCuston} > Ainda sem cadastro </Text>
            <Text style={css.TextCustonBold} > Cadastre-se </Text>
           </TouchableOpacity>

        </View>
     
    );
}


-- estilizamos alguns omponentes na PASTA css
  inputArea:{
        backgroundColor:'#63C2D1',
        padding: 40,
        width: '80%',
        height: 400
    },

 CustonButton:{
        height:60,
        backgroundColor:'#268596',
        borderRadius:30,
        justifyContent:'center',
        alignItems:'center'
    },

    TextCuston:{
        fontSize:18,
        color:'#268596'

    },

    TextCustonBold:{
        fontSize:18,
        color:'#268596',
        fontWeight:'bold',
        marginLeft:5

    },

    // TouchableOpacity , texto uma ao lado do outro
    CustonMessageButton:{
        flexDirection:'row',
        justifyContent:'center',
        marginTop:50,
        marginBottom:20

    },




14 ---COMPONENTES EXTERNO (serão usando em varias telas, inclusive na SignIn.js)
VAMOS CRIAR E GUARDAR-LOS NA PASTA componentes

-----PRIMEIRO COMPONENTES (SignInput.js)  --INICIALMENTE
import React from "react";
import {View, StyleSheet, Text }   from "react-native";

const estilos = StyleSheet.create({

    ImputArea:{
        with:'100%',
        height:60,
         backgroundColor:'#268596',
         flexDirection:'row', 
         borderRadius:30,
         paddingLeft:15,
         alignItems:'center',
         marginBottom:15
       
        }
    });

   

export default ()=>{

return (
  <View style={estilos.ImputArea} > 
 <Text>ot</Text>
  </View>


);
}

-------E O CHAMARIA (usaria) (importando o componentes) e Aplicando na VIEW SignIn.js
import React from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet } from "react-native";
import css from '../assets/css/Css'
import SignInput from "../../componentes/SignInput";


export  default  function App1(){
    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />
       
         <View style={css.inputArea}>
         
             <SignInput/>
              
              <SignInput/>

           <TouchableOpacity style={css.CustonButton}>
              <Text style={css.button__text}  >Login</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton}>
            <Text style={css.TextCuston} > Ainda sem cadastro </Text>
            <Text style={css.TextCustonBold} > Cadastre-se </Text>
           </TouchableOpacity>

        </View>
    
    );
}



15--VAMOS MELHORAR - No SignInput.js
--VAMOS COLOCAR O ICON E O CAMPO no IMput de login e Senha   ---NÃO CONSEGUI COLOCAR O ICON XXXXXXXXX

import React from "react";
import {View, StyleSheet, Text, Image, TextInput}   from "react-native";

const estilos = StyleSheet.create({

    ImputArea:{
        with:'100%',
        height:60,
         backgroundColor:'#83D6E3',
         flexDirection:'row', 
         borderRadius:30,
         paddingLeft:15,
         alignItems:'center',
         marginBottom:15
       
        },

        TextImput2:{
            flex:1,
            fontSize:16,
            color:'#268596',
            marginLeft:15
        }
    });

   // <IconPng  with="24" height="24" fill="#268596" />

export default ({IconPng, placeholder} )=>{

return (
  <View style={estilos.ImputArea} > 

    <TextInput style={estilos.TextImput2} placeholder={placeholder} ></TextInput>
  </View>


);
}

-----E A SignUp.js
import React from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet } from "react-native";
import css from '../assets/css/Css'
import SignInput from "../../componentes/SignInput";

import Envelope from "../assets/images/Envelope.png";
import Cadeado from  "../assets/images/Cadeado.png";


export  default  function App1(){
    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />
       
         <View style={css.inputArea}>
         
             <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              />

           <TouchableOpacity style={css.CustonButton}>
              <Text style={css.button__text}  >Login</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton}>
            <Text style={css.TextCuston} > Ainda sem cadastro </Text>
            <Text style={css.TextCustonBold} > Cadastre-se </Text>
           </TouchableOpacity>

        </View>
    
    );
}

16 ------TENTAR FAZER FUNCIONAR O LOGIN
---VAMOS criar state do email e da senha NA VIEW  SignIn.js 
 const [emailField, setEmailField] = useState('');
 const [passwordField, setPasswordField] = useState('');
----Usaremos o UseState lá em cima
-e repasaremos nos nos SignInput com o value
  <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             value={emailField}
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              />
---e vamos repassar tambem para a VIEW SignInput.js no imput com o value igual ao value
     export default ({IconPng, placeholder, value} )=>{

return (
  <View style={estilos.ImputArea} > 

    <TextInput style={estilos.TextImput2} placeholder={placeholder} ></TextInput>
    Value={value}
  </View>

);
}

----NESSE MOMENTO SE QUISSER FAZER UM TESTE É SO COLOCAR UM STRING NO Started
export  default  function App1(){

      const [emailField, setEmailField] = useState('carlos@gloa');
      const [passwordField, setPasswordField] = useState('');
----------
---AGORA PRECISAMOS A PESSOA MUDAR O texto
---NA view SignIn.js VAMOS POR A PROPRIEDADE onChangeText PARA Mudar o text 
 <View style={css.inputArea}>
         
             <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             value={emailField}
             onChangeText={t=>setEmailField(t)}
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              onChangeText={t=>setPasswordField(t)}
              />
---E Repassar para a VIEW SignInput.js no imput com o onChangeText={onChangeText} (REPLICAR)
export default ({IconPng, placeholder, value, onChangeText} )=>{

return (
  <View style={estilos.ImputArea} > 

    <TextInput style={estilos.TextImput2}
     placeholder={placeholder} 
     value={value}
     onChangeText={onChangeText}
    
    />
   
  </View>

);
}

-----APARTIR DE AGORA POSSO CONTROLAR --DIGITAR O desejado
---NA SENHA PRECISAMOS OMITIR O conteudo
---NA View SignIn.js VAMOS dizer que a password é verdadeira
<SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              onChangeText={t=>setPasswordField(t)}
              password={true}
              />
 --E AO REPLICARMOS NA VIEW SignInput.js FLAR QUE ELA È SEGURA PELA PROPRIEDADE secureTextEntry={password}
export default ({IconPng, placeholder, value, onChangeText, password} )=>{

return (
  <View style={estilos.ImputArea} > 

    <TextInput style={estilos.TextImput2}
     placeholder={placeholder} 
     value={value}
     onChangeText={onChangeText}
    secureTextEntry={password}
    />
   
  </View>

);
}

----------OK PERFEITO

17--VAMOS CRIAR A TELA DE REGISTRO\CADASTRO (SignUp.js) que é identica a essa so que um campo a mais
---COPIA A SignIm.js e cola na SignUp.js


import React, {useState, useEffect} from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet } from "react-native";
import css from '../assets/css/Css'
import SignInput from "../../componentes/SignInput";
import { useNavigation } from "@react-navigation/native";

import Envelope from "../assets/images/Envelope.png";
import Cadeado from  "../assets/images/Cadeado.png";


export  default  function App2(){

 

   //Função de NAVEGAÇÃO
   const navigation=useNavigation();


   //Função de state
      const [nomeField, setNameField] = useState('');
      const [emailField, setEmailField] = useState('');
      const [passwordField, setPasswordField] = useState('');

      
   //Função de redirecionamento

        const handleSignClick= ()=> { 

        }

   
         const handleMessageButtonClick = ()=> { 
             // NAVEGAR POR ROUTER
            //navigation.navigate('SignUp');
          // handleMessageButtonClick();
             navigation.navigate({ 
               routes:[{name: 'SignIn'}]
            });
           /*
            onPress= ()=>{SignUp}  
                
           onPress={()=>{navigation.navigate("Home")}}  */
         }

    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />
       
         <View style={css.inputArea}>

            <SignInput IconPng={Envelope}
             placeholder="Digite seu Nome"
             value={nomeField}
             onChangeText={t=>setNameField(t)}
             /> 

             <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             value={emailField}
             onChangeText={t=>setEmailField(t)}
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              onChangeText={t=>setPasswordField(t)}
              password={true}
              />

           <TouchableOpacity style={css.CustonButton} onPress={handleSignClick} >
              <Text style={css.button__text}  >CADASTRAR</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton} onPress={handleMessageButtonClick} >
            <Text style={css.TextCuston} >Já tem cadastro </Text>
            <Text style={css.TextCustonBold} > Faça Login </Text>
           </TouchableOpacity>

        </View>
    
    );
}



18---VAMOS PARA AÇÃO do BOTÃO CADASTRA-SE (ir para tela de registro) e LOGIn na |TELA SignIn.js
--PARA NAVEGAR PRECISAMOS DO NAVIGATION --VAMOS IMPORTAR-LO
import { useNavigation } from "@react-navigation/native";
---E CRIAR UMA VARIAVEL DE navegação

---E CRIAR UM FUNÇÂO DE NAVEGAÇÂO 
 //Função de NAVEGAÇÃO
   const navigation = useNavigation();

---VAmos Criar uma função para direcionar na tela SignIn.js (LOGIN) atraves do evento onpress do TouchableOpacity
 //Função de redirecionamento

        const handleSignClick= ()=> { 

        }
 
         const handleMessageButtonClick= ()=> { 
              
             navigation.reset({ 
               index:0,
               routes:[{name: 'SignUp'}]
                
            });
         }

-----Evento onpress
<TouchableOpacity style={css.CustonButton} onPress={handleSignClick} >
              <Text style={css.button__text}  >Login</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton} onPress={handleMessageButtonClick} >



-------OBSERVAÇÂO --(tinha esquecido de empilha a TELA SignUp.js la em App.js no nos Stack)

---EMPINHANDO apos importar a App.js FICA ASSIM:
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import Preload from "./barb/screens/preload";
import SignIn from './barb/screens/SignIn';
import SignUp from './barb/screens/SignUp';
// IMPORTAT CONTEXT que ira  ENGLOBAR O APLICATIVO (NavigationContainer)
import UserContextProfile from './barb/contexts/UserContext';

export default function App() {
  
  //VAMOS Criar nossa PILHA que vai receber o retorno do createStackNavigator(pilha de navegação)
    const Stack = createStackNavigator();


//VAMOS Criar Container, o Navegador e as Telas de navegação ENGLOBADA PELO Context
    return (
     
       <UserContextProfile>
      <NavigationContainer>
          <Stack.Navigator
          initialRouteName="Preload" 
         >
          <Stack.Screen name="Preload" component={Preload}   options={{headerShown:false}}
          // EXIBINDO uma tela Preload ---vai ficar um de cada vez (DEFINR A PRIMEIRA EM  <Stack.Navigator initialRouteName="Preload">)
          />
           <Stack.Screen name="SignIn" component={SignIn}   options={{headerShown:false}}/>
           <Stack.Screen name="SignUp" component={SignUp}   options={{headerShown:false}}/>
          </Stack.Navigator>
      </NavigationContainer>

   </UserContextProfile>
    );
}

----A PAGINA SignIn.js FICARÁ ASSIM ---com o redirecionamento 
---MUDEI O nome da fuction para (Login)

import React, {useState, useEffect} from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet } from "react-native";
import css from '../assets/css/Css'
import SignInput from "../../componentes/SignInput";
import { useNavigation } from "@react-navigation/native";

import Envelope from "../assets/images/Envelope.png";
import Cadeado from  "../assets/images/Cadeado.png";


export  default  function Login(){


   //Função de NAVEGAÇÃO
   const navigation = useNavigation();


   //Função de state
      const [emailField, setEmailField] = useState('');
      const [passwordField, setPasswordField] = useState('');

      
   //Função de redirecionamento

        const handleSignClick= ()=> { 

        }

   
         const handleMessageButtonClick = ()=> { 
              // // NAVEGAR POR ROUTER (reset - não deixa voltar)
              navigation.reset({ 
                index:0,
               routes:[{name: 'SignUp'}]
                
            });
           /**/ 
         /*
             onPress= ('SignUp')
                onPress={()=>{navigation.navigate("SignUp")}}  
                  navigation.navigate('SignUp');
         */

         }
 
    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />
       
         <View style={css.inputArea}>
         
             <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             value={emailField}
             onChangeText={t=>setEmailField(t)}
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              onChangeText={t=>setPasswordField(t)}
              password={true}
              />

           <TouchableOpacity style={css.CustonButton} onPress={handleSignClick} >
              <Text style={css.button__text}  >Login</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton}    onPress={handleMessageButtonClick}    >
            <Text style={css.TextCuston} > Ainda sem cadastro </Text>
            <Text style={css.TextCustonBold} > Cadastre-se </Text>
           </TouchableOpacity>

        </View>
    
    );
}


--------Ok PERFEITO (assim redirecionou para cadastro)   poderia ter feito
pelo onPress={()=>{navigation.navigate("SignUp")} no TouchableOpacity

19-----VAMOS COMEÇAR A FAZER REQUISIÇÕES
------- CRIAR UM DIRETORIO em barb\Api.js e CRIAR UMA API

const BASE_API = 'https://api.b7web.com.br/devbarber/api';
//OBJETO QUE VAI TER AS AÇÕES QUE VAMOS PRECISAR FAZER

// TOKEN

export default{
 CkeckToken: async (token)=> {

    const req = await fetch(`${BASE_API}/auth/refresh`, {
        method:'POST',
            headers: {
                    accept: 'application/json',
                    'Content-Type': 'application/json',
               },
       //CONTEUDO que estou enviando
       body: JSON.stringify ( {token} )

    });
    const json = await req.json();
    return json;


    },

    // LOGIN

     // RECEBER um email e uma Senha aqui
    signIn: async (email, password)=> {
        console.log("URL", `${BASE_API}/auth/login` );
        console.log("email", email );
        console.log("password" , password);
        const req = await fetch(`${BASE_API}/auth/login`, {
                method:'POST',
                headers: {
                    accept: 'application/json',
                    'Content-Type': 'application/json',
               },
               //CONTEUDO que estou enviando
               body: JSON.stringify ( {email, password} )

            });
            const json = await req.json();
            return json;
    },
 // CADASTRO
    signUp: async (name, email, password)=> {
        console.log("name", name );
        console.log("email", email );
        console.log("password" , password);
        const req = await fetch(`${BASE_API}/auth/user`, {
            method:'POST',
               headers: {
                    accept: 'application/json',
                    'Content-Type': 'application/json',
               },
           //CONTEUDO que estou enviando
           body: JSON.stringify ( {name, email, password} )

        });
        const json = await req.json();
        return json;
    },
};

---TEsTAR NO SITE e cria ussuario de teste (https://resttesttest.com/) NO metodo POST
nane Paulo
 email paulo@gmail.com
  password 1234


 ------PARA USAR AS REQUISIÇÕES IMPORTAMOS E COLOCAMOS NA TELAS

20 ---TELA DE LOGIN (SignIn.js)
import Api from '../../Api';
------


import React, {useState, useEffect} from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet } from "react-native";
import css from '../assets/css/Css'
import SignInput from "../../componentes/SignInput";
import { useNavigation } from "@react-navigation/native";
import Api from '../Api';


import Envelope from "../assets/images/Envelope.png";
import Cadeado from  "../assets/images/Cadeado.png";


export  default  function Login(){


   //Função de NAVEGAÇÃO
   const navigation = useNavigation();


   //Função de state
      const [emailField, setEmailField] = useState('');
      const [passwordField, setPasswordField] = useState('');

      
   //Função de redirecionamento

        const handleSignClick = async ()=> { 
            // Se apertou botao de login verifivar se colocou email e senha
            if(emailField !== '' && passwordField !== '' ) {
               // RECEBER A RESPOSTA (podia ser let res)
               let json = await Api.signIn(emailField, passwordField );
               console.log(json);
               // Verifica A RESPOSTA
               if (json.token){
                  alert('DEU CERTO');

               }else{
                  alert('Email e ou senha errado');
               }

            }else{
               alert ('Preencha os campos');

            }
        }

   
         const handleMessageButtonClick = ()=> { 
              // // NAVEGAR POR ROUTER (reset - não deixa voltar)
              navigation.reset({ 
                index:0,
               routes:[{name: 'SignUp'}]
                
            });
         }
 
    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />
       
         <View style={css.inputArea}>
         
             <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             value={emailField}
             onChangeText={t=>setEmailField(t)}
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              onChangeText={t=>setPasswordField(t)}
              password={true}
              />

           <TouchableOpacity style={css.CustonButton} onPress={handleSignClick} >
              <Text style={css.button__text}  >Login</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton}    onPress={handleMessageButtonClick}    >
            <Text style={css.TextCuston} > Ainda sem cadastro </Text>
            <Text style={css.TextCustonBold} > Cadastre-se </Text>
           </TouchableOpacity>

        </View>
    
    );
}

21----- ---TELA DE CADASTRO (SignUp.js)
import Api from '../../Api';
------

import React, {useState, useEffect} from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet } from "react-native";
import css from '../assets/css/Css'
import SignInput from "../../componentes/SignInput";
import { useNavigation } from "@react-navigation/native";
import Api from '../Api';

import Envelope from "../assets/images/Envelope.png";
import Cadeado from  "../assets/images/Cadeado.png";


export  default  function App2(){

 

   //Função de NAVEGAÇÃO
   const navigation=useNavigation();


   //Função de state
      const [nameField, setNameField] = useState('');
      const [emailField, setEmailField] = useState('');
      const [passwordField, setPasswordField] = useState('');

      
   //Função de redirecionamento

        const handleSignClick =  async()=> { 
         if(nameField !== '' && emailField !== '' && passwordField !== '' ) {
            // RECEBER A RESPOSTA (podia ser let res)
            let res = await Api.signUp(nameField, emailField, passwordField );
            console.log(res);
            // Verifica A RESPOSTA
            if (res.token){
               alert('DEU CERTO');

            }else{
               alert("Erro :"+res.error);
            }

         }else{
            alert ('Preencha os campos');

         }
        }

   
         const handleMessageButtonClick = ()=> { 
             // NAVEGAR POR ROUTER
            //navigation.navigate('SignUp');
          // handleMessageButtonClick();
             navigation.navigate({ 
               routes:[{name: 'SignIn'}]
            });
           /*
            onPress= ()=>{SignUp}  
                
           onPress={()=>{navigation.navigate("Home")}}  */
         }

    return(
      
      <View style={css.headerdois}>
      
         <Image style={css.header__img} source={require('../assets/images/barber.png')} />
       
         <View style={css.inputArea}>

            <SignInput IconPng={Envelope}
             placeholder="Digite seu Nome"
             value={nameField}
             onChangeText={t=>setNameField(t)}
             /> 

             <SignInput IconPng={Envelope}
             placeholder="Digite seu Email"
             value={emailField}
             onChangeText={t=>setEmailField(t)}
             /> 
              
              <SignInput IconPng={Cadeado}
              placeholder="Digite Sua Senha"
              value={passwordField}
              onChangeText={t=>setPasswordField(t)}
              password={true}
              />

           <TouchableOpacity style={css.CustonButton} onPress={handleSignClick} >
              <Text style={css.button__text}  >CADASTRAR</Text>
           </TouchableOpacity> 
           </View>

           <TouchableOpacity  style={css.CustonMessageButton} onPress={handleMessageButtonClick} >
            <Text style={css.TextCuston} >Já tem cadastro </Text>
            <Text style={css.TextCustonBold} > Faça Login </Text>
           </TouchableOpacity>

        </View>
    
    );
}


---OK PERFEITO (funcionou apenas com messagem , vamos entrar na telas de verdade)



22----SALVAR O TOKEM

1:59







~~~~~~~~~~~~~~~~~~~~~~








----Tela de SignUp.js



10-----VAMOS IMPORTAR ESSAS TELA PARA NOSSA PILHAS (MainStack)


XXXXXXXXXX VOLTAR E COLOCAR return


---App->screens->login->loginscreens.tsx

----OK VAMOS PARA Navigation
---Olha o site oficial (https://reactnavigation.org/)--RED DOCS->GET Start

# npm install react-native-reanimated  ---PULEI ESSA
# npm install react-native-gesture-handler  
# npm install @react-native-community/masked-view  ---PULEI ESSA

# npm install @react-navigation/bottom-tabs  
# npm install @react-navigation/drawer
---PRIMEIRA TEMOS QUE INSTALAR A DEPENDENCIA DO AsyncStorage

# npm install @react-native-community/async-storage   --DEU ERRO COMO SEMPRE, QUEBREI A DEPENDENCIA A FORÇA 
# npm install @react-native-community/async-storage --force ---USEI ESSA
# npm install react-native-maps --save-exact
BD1---BD Sqligfe
---FAZ UM BD uff8_genaral_ci
---Instalar Squilfe
# npm install --save sequelize

---VER DOCUMENTAÇÂO
---VAMOS EM MENU ->migration
# npm install --save-dev sequelize-cli
--E DEPOIS RODA O COMANDO PARA INICIAR (uso)
# npx sequelize-cli init


---VAI CRIAR NO PROJETO AS PASTAS DE migration, moldels, seedrs e config 
---NA DOCUMENTAÇÃO TEM COMO CRIARMOS NOSSA moldels
 // npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string

-- --Vamos mudar o nosso MIGRATIONS E models  User
#  npx sequelize-cli model:generate --name User --attributes name:string,password:string,email:string,balance:float

-- --Vamos mudar o nosso MIGRATIONS models  Pokemon
#  npx sequelize-cli model:generate --name Pokemon --attributes name:string,price:float,image:string,userId:integer 

--VAMOS FAZER UMA CHAVE ESTRANGEIRA NA MIGRATIONS Pokemon
--VAMOS LA EM MIGRATIONS Pokemon->UserId e dix que ela faz referencia ao id da tabela Users

@ userId: {
        type: Sequelize.INTEGER,
        references:{
          model:'users',
          key:'id'
        },
         onUpdate:'cascade',
         onDelete:'cascade'
---AGORA PODE RODAR A Migrate de ja CRIA AS TABELAS    
# npx sequelize-cli db:migrate

----DEU ERRO() Please install mysql2 package manually)

--INSTALEI O PACOTE mysql2
# npm install -g mysql2
# npm install mysql2 --save
